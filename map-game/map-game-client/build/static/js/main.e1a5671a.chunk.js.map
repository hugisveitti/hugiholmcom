{"version":3,"sources":["components/AppContainer.jsx","components/icon.png","components/FrontPage.jsx","utility/socketFunctions.js","components/MapComponent.jsx","components/PanoramaComponent.jsx","components/LeaderBoardComponent.jsx","components/GameContainer.jsx","components/WaitingRoomComponent.jsx","Routes.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["colors","useStyles","makeStyles","createStyles","root","flexGrow","minHeight","position","backgroundColor","menuButton","marginRight","title","header","footer","fontSize","margin","color","bottom","width","height","padding","marginTop","footerContent","container","paddingTop","paddingBottom","buttonGreen","background","cardContainer","textAlign","marginBottom","icon","AppContainer","children","classes","className","AppBar","Toolbar","FrontPage","socket","props","useState","roomName","setRoomName","playerName","setPlayerName","style","src","alt","Card","CardContent","TextField","id","placeholder","value","onChange","e","target","Button","variant","onClick","emit","history","push","waitingPagePath","sortPlayersByScore","players","sort","a","b","score","MapComponent","setImageUrls","imageLoaded","guessSentCallback","isLeader","distance","roundPosition","setGuessSent","guessSent","roundOver","setRoundOver","lat","lng","markerPos","setMarkerPos","defaultIcon","correctIcon","L","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","CorrectMarker","Marker","LineBetweenMarkers","Polyline","positions","MyMarker","useMapEvents","click","console","log","latlng","map","player","markerPosition","name","Popup","startNextRound","StartNextRoundButton","Typography","MapContainer","center","zoom","bounds","latLngBounds","latLng","TileLayer","attribution","url","Fragment","toLocaleString","correctLng","changeValue","Math","abs","getCorrectLng","greenButton","PanoramaComponent","imageUrls","imgUrl","currentIndex","setCurrentIndex","setImgUrl","panoRef","useRef","handlePanoLoad","changeImage","newIndex","webGLContainer","document","getElementsByClassName","childNodes","length","removeChild","current","panorama","destroy","PannellumRender","ref","image","pitch","yaw","hfov","compass","autoLoad","onLoad","CircularProgress","LeaderBoardComponent","Paper","List","dense","ListItem","ListItemText","inset","i","listBackgroundColor","ListItemIcon","ChildCare","primary","GameContainer","setImageLoaded","countdownStarted","setCountdownStarted","setPlayers","setIsLeader","setDistance","undefined","setRoundPosition","timerSeconds","setTimerSeconds","countDownKey","setCountDownKey","timePerRound","setTimePerRound","currentRound","setCurrentRound","numberOfRounds","setNumberOfRounds","gameOver","setGameOver","playingAgainPressed","setPlayAgainPressed","startCountDownTimer","useCallback","useEffect","on","data","gameData","_players","_timePerRound","_currentRound","_numberOfRounds","_roomName","myImageUrls","currKey","watchSendImages","isGameLeader","correctPosition","_distance","_playerName","watchRoundOver","handlePlayAgain","RenderPlayAgainBtn","top","left","isPlaying","size","duration","remainingTime","WaitingRoomComponent","onlyPano","setOnlyPano","onlyEuropeUsa","once","_isLeader","gamePagePath","elevation","type","FormControlLabel","control","Checkbox","checked","label","isNaN","ENDPOINT","window","location","hostname","Routes","setSocket","newSocket","socketIOClient","connect","exact","path","render","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e1a5671a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, AppBar, Toolbar } from \"@material-ui/core\";\r\n\r\nexport const colors = [\r\n  \"#52BE80\",\r\n  \"#DAF7A6\",\r\n  \"#FFC300\",\r\n  \"#FF5733\",\r\n  \"#2C3E50\",\r\n  \"#5D6D7E\",\r\n];\r\nexport const backgroundCardColor = \"#F9EBEA\";\r\n\r\nexport const useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      minHeight: \"100vh\",\r\n      position: \"relative\",\r\n      backgroundColor: \"#D1F2EB\",\r\n    },\r\n    menuButton: {\r\n      marginRight: 20,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    header: {\r\n      backgroundColor: colors[0],\r\n    },\r\n    footer: {\r\n      backgroundColor: colors[0],\r\n      fontSize: 10,\r\n      margin: \"auto\",\r\n      color: \"white\",\r\n      position: \"absolute\",\r\n      bottom: 0,\r\n      width: \"100%\",\r\n      height: \"2.5rem\",\r\n      padding: 0,\r\n      marginTop: 20,\r\n    },\r\n    footerContent: {\r\n      margin: \"auto\",\r\n    },\r\n    container: {\r\n      paddingTop: 20,\r\n      paddingBottom: 100,\r\n    },\r\n    buttonGreen: {\r\n      background: colors[0],\r\n      color: \"white\",\r\n    },\r\n    cardContainer: {\r\n      margin: \"auto\",\r\n      width: 400,\r\n      backgroundColor: backgroundCardColor,\r\n      textAlign: \"center\",\r\n      padding: 20,\r\n      marginBottom: 20,\r\n      marginTop: 20,\r\n    },\r\n    icon: {\r\n      width: \"auto\",\r\n      height: 60,\r\n    },\r\n  })\r\n);\r\nconst AppContainer = ({ children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.header}>\r\n          <h3>JeoJuessr</h3>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.container}>{children}</div>\r\n      <Toolbar className={classes.footer}>\r\n        <div className={classes.footerContent}>footer stuff</div>\r\n      </Toolbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n","export default __webpack_public_path__ + \"static/media/icon.f293e650.png\";","import React, { useState } from \"react\";\r\nimport { Button, Card, CardContent, TextField } from \"@material-ui/core\";\r\nimport { waitingPagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\n\r\nconst FrontPage = ({ socket, ...props }) => {\r\n  const classes = useStyles();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const handleConnectToRoom = () => {\r\n    if (roomName === \"\" || playerName === \"\") return;\r\n    socket.emit(\"roomConnection\", { roomName, playerName });\r\n    props.history.push(waitingPagePath);\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <img className={classes.icon} src={icon} alt=\"joejuessrlogo\" />\r\n        <Card className={classes.cardContainer}>\r\n          <CardContent>\r\n            <p>Still in development</p>\r\n            <p>\r\n              Please write in 'Room Name' anything, then tell your friends to\r\n              write the same thing to play together. Or you can play by\r\n              yourself.\r\n            </p>\r\n            <p>\r\n              This is in development so there are probably hella bugs. ToDo: add\r\n              leaderboard. Make finding new positions better. Using open street\r\n              maps and Mapillary.\r\n            </p>\r\n\r\n            <TextField\r\n              id=\"player-text-field\"\r\n              placeholder=\"Name\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"room-text-field\"\r\n              placeholder=\"Room Name\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Button\r\n              className={classes.buttonGreen}\r\n              variant=\"contained\"\r\n              onClick={handleConnectToRoom}\r\n            >\r\n              Connect\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","export const sortPlayersByScore = (players) => {\r\n  return players.sort((a, b) => {\r\n    if (a.score < b.score) return 1;\r\n    if (a.score > b.score) return -1;\r\n    return 0;\r\n  });\r\n};\r\n\r\n// 1024 640 or 2048\r\nconst getImageUrlFromKey = (key) => {\r\n  const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n  return _imgUrl;\r\n};\r\n\r\nexport const watchSendImages = ({\r\n  socket,\r\n  setGameOver,\r\n  setRoomName,\r\n  setCurrentRound,\r\n  setNumberOfRounds,\r\n  setTimePerRound,\r\n  setTimerSeconds,\r\n  setPlayers,\r\n  setCurrentIndex,\r\n  setImageUrls,\r\n  setImgUrl,\r\n  setImageLoaded,\r\n  setDistance,\r\n  setGuessSent,\r\n  startCountDownTimer,\r\n  setRoundOver,\r\n  setRoundPosition,\r\n}) => {\r\n  socket.on(\"handleSendImages\", (data) => {\r\n    setGameOver(false);\r\n    const { gameData } = data;\r\n    let _players = data[\"players\"];\r\n    _players = sortPlayersByScore(_players);\r\n    const _timePerRound = data[\"timePerRound\"];\r\n    const _currentRound = data[\"currentRound\"];\r\n    const _numberOfRounds = data[\"numberOfRounds\"];\r\n    const _roomName = data[\"roomName\"];\r\n    setRoomName(_roomName);\r\n    setCurrentRound(_currentRound);\r\n    setNumberOfRounds(_numberOfRounds);\r\n    setTimePerRound(_timePerRound);\r\n    setTimerSeconds(_timePerRound);\r\n    setPlayers(_players);\r\n    const myImageUrls = [];\r\n    if (gameData[\"features\"].length > 0) {\r\n      for (let i = 0; i < gameData[\"features\"].length; i++) {\r\n        const item = gameData[\"features\"][i];\r\n        const currKey = item[\"properties\"][\"key\"];\r\n        const url = getImageUrlFromKey(currKey);\r\n        myImageUrls.push(url);\r\n      }\r\n      setCurrentIndex(0);\r\n      setImageUrls(myImageUrls);\r\n      setImgUrl(myImageUrls[0]);\r\n      setImageLoaded(true);\r\n      setRoundPosition(undefined);\r\n      setDistance(-1);\r\n      setGuessSent(false);\r\n      startCountDownTimer();\r\n      setRoundOver(false);\r\n    }\r\n  });\r\n};\r\n\r\nexport const watchRoundOver = ({\r\n  socket,\r\n  setPlayerName,\r\n  setPlayers,\r\n  setRoundPosition,\r\n  setDistance,\r\n  setIsLeader,\r\n  setCountdownStarted,\r\n  setRoundOver,\r\n}) => {\r\n  socket.on(\"handleRoundOver\", (data) => {\r\n    const { isGameLeader, correctPosition } = data;\r\n\r\n    const _distance = data[\"distance\"];\r\n    const _players = data[\"players\"];\r\n    const _playerName = data[\"playerName\"];\r\n    setPlayerName(_playerName);\r\n    setPlayers(_players);\r\n    setRoundPosition(correctPosition);\r\n    setDistance(_distance);\r\n\r\n    setIsLeader(isGameLeader);\r\n    setCountdownStarted(false);\r\n    setRoundOver(true);\r\n  });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMapEvents,\r\n  Polyline,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst MapComponent = ({\r\n  socket,\r\n  setImageUrls,\r\n  imageLoaded,\r\n  guessSentCallback,\r\n  isLeader,\r\n  distance,\r\n  roundPosition,\r\n  setGuessSent,\r\n  guessSent,\r\n  players,\r\n  playerName,\r\n  roundOver,\r\n  setRoundOver,\r\n}) => {\r\n  const position = [51.505, -0.09];\r\n  const [markerPos, setMarkerPos] = useState({ lat: 51.505, lng: -0.09 });\r\n  const classes = useStyles();\r\n  const defaultIcon = (correctIcon) =>\r\n    L.icon({\r\n      iconUrl: correctIcon\r\n        ? icon\r\n        : \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\",\r\n      shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const otherPlayersIcon = () =>\r\n    L.icon({\r\n      iconUrl:\r\n        \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png\",\r\n      // shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const CorrectMarker = () => {\r\n    if (!roundPosition) return null;\r\n    return <Marker icon={defaultIcon(true)} position={roundPosition} />;\r\n  };\r\n\r\n  const LineBetweenMarkers = () => {\r\n    if (!roundPosition) return null;\r\n    return (\r\n      <Polyline\r\n        positions={[\r\n          [roundPosition.lat, roundPosition.lng],\r\n          [markerPos.lat, markerPos.lng],\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const MyMarker = () => {\r\n    useMapEvents({\r\n      click(e) {\r\n        console.log(\"map clicked\", e.latlng);\r\n        if (!roundOver) {\r\n          setMarkerPos({ lat: e.latlng.lat, lng: e.latlng.lng });\r\n        }\r\n      },\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <Marker icon={defaultIcon(false)} position={markerPos} />\r\n        {roundOver && <CorrectMarker />}\r\n        {roundOver && <LineBetweenMarkers />}\r\n        {players.map((player) => {\r\n          if (player.markerPosition && player.name !== playerName) {\r\n            return (\r\n              <Marker\r\n                icon={otherPlayersIcon()}\r\n                position={player.markerPosition}\r\n                key={player.name}\r\n              >\r\n                <Popup>{player.name}</Popup>\r\n              </Marker>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCorrectLng = (lng) => {\r\n    let changeValue = 0;\r\n    if (lng < 180) {\r\n      changeValue = 360;\r\n    } else if (lng > 180) {\r\n      changeValue = -360;\r\n    }\r\n    while (Math.abs(lng) > 180) {\r\n      lng += changeValue;\r\n    }\r\n    return lng;\r\n  };\r\n\r\n  const handleGuessSent = () => {\r\n    guessSentCallback();\r\n    setGuessSent(true);\r\n    const correctLng = getCorrectLng(+markerPos.lng);\r\n    socket.emit(\"handleSendGuess\", {\r\n      position: { lat: markerPos.lat, lng: correctLng },\r\n    });\r\n  };\r\n\r\n  const startNextRound = () => {\r\n    socket.emit(\"handleStartNextRound\", {});\r\n    setImageUrls([]);\r\n    setGuessSent(false);\r\n    setRoundOver(false);\r\n  };\r\n\r\n  const StartNextRoundButton = () => {\r\n    if ((guessSent && roundPosition) || roundOver) {\r\n      if (isLeader) {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Button\r\n              onClick={startNextRound}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start next round\r\n            </Button>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Typography>Waiting for leader to start next round</Typography>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <MapContainer\r\n        center={position}\r\n        zoom={2}\r\n        style={{\r\n          height: 400,\r\n          width: \"70%\",\r\n          margin: \"auto\",\r\n          marginBottom: 15,\r\n        }}\r\n        bounds={L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180))}\r\n      >\r\n        <MyMarker />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\"\r\n        />\r\n      </MapContainer>\r\n\r\n      {roundPosition && (\r\n        <React.Fragment>\r\n          {distance !== -1 ? (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You were {distance.toLocaleString()} KM from the correct position.\r\n            </Typography>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You did not guess this round.\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n      {imageLoaded && !roundPosition && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Button\r\n            onClick={handleGuessSent}\r\n            variant=\"contained\"\r\n            className={classes.greenButton}\r\n          >\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {guessSent && !roundPosition && (\r\n        <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n          <Typography>Waiting for other players to finish.</Typography>\r\n        </div>\r\n      )}\r\n      <StartNextRoundButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useRef } from \"react\";\r\nimport { Pannellum } from \"pannellum-react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport \"./GameContainer.css\";\r\n\r\nconst PanoramaComponent = ({\r\n  imageUrls,\r\n  imgUrl,\r\n  currentIndex,\r\n  setCurrentIndex,\r\n  setImgUrl,\r\n  guessSent,\r\n}) => {\r\n  const panoRef = useRef();\r\n  const handlePanoLoad = () => {\r\n    console.log(\"pano loaded\");\r\n    // panoRef?.current?.panorama.loadScene();\r\n  };\r\n\r\n  const changeImage = (newIndex) => {\r\n    // delete webGL so its doesn't load stuff we dont want\r\n    const webGLContainer = document.getElementsByClassName(\r\n      \"pnlm-render-container\"\r\n    )[0];\r\n\r\n    while (webGLContainer.childNodes.length > 0) {\r\n      webGLContainer.removeChild(webGLContainer.childNodes[0]);\r\n    }\r\n    if (panoRef?.current) {\r\n      console.log(\"destroying context\");\r\n      panoRef.current.panorama.destroy();\r\n    }\r\n\r\n    setImgUrl(imageUrls[newIndex]);\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const PannellumRender = () => {\r\n    return (\r\n      <Pannellum\r\n        ref={panoRef}\r\n        width=\"100%\"\r\n        height=\"500px\"\r\n        image={imgUrl}\r\n        pitch={10}\r\n        yaw={180}\r\n        hfov={110}\r\n        compass\r\n        autoLoad\r\n        onLoad={handlePanoLoad}\r\n      />\r\n    );\r\n  };\r\n\r\n  if (imageUrls.length > 0) {\r\n    return (\r\n      <div className=\"pano-container\">\r\n        <Typography style={{ textAlign: \"center\" }}>\r\n          {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n        </Typography>\r\n        <button className=\"pano-btn\" id=\"pano-prev-btn\" onClick={decIndex}>\r\n          <i className=\"arrow arrow-left\"></i>\r\n        </button>\r\n        <button\r\n          className=\"pano-btn arrow-right\"\r\n          id=\"pano-next-btn\"\r\n          onClick={incIndex}\r\n        >\r\n          <i className=\"arrow\"></i>\r\n        </button>\r\n        <PannellumRender />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!guessSent) {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Typography style={{ textAlign: \"center\" }}>\r\n      Waiting for leader to start round.\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default PanoramaComponent;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  ListItem,\r\n  List,\r\n  ListItemText,\r\n  ListItemIcon,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst LeaderBoardComponent = ({ players, roomName }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.cardContainer}>\r\n      <Typography variant=\"h6\">Players in room {roomName}</Typography>\r\n      <List dense={false} style={{ width: 400, margin: \"auto\" }}>\r\n        <ListItem>\r\n          <ListItemText inset>Name</ListItemText>\r\n          <ListItemText>Score</ListItemText>\r\n        </ListItem>\r\n        {players.map((player, i) => {\r\n          const listBackgroundColor = i % 2 === 0 ? \"#ffeeee\" : \"inherit\";\r\n          return (\r\n            <React.Fragment key={`${player.name}-${i}`}>\r\n              <ListItem style={{ backgroundColor: listBackgroundColor }}>\r\n                {player.isLeader && (\r\n                  <ListItemIcon>\r\n                    <ChildCare />\r\n                  </ListItemIcon>\r\n                )}\r\n                <ListItemText inset={!player.isLeader} primary={player.name} />\r\n                <ListItemText primary={(+player.score).toLocaleString()} />\r\n              </ListItem>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default LeaderBoardComponent;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { CircularProgress, Typography, Button } from \"@material-ui/core\";\r\nimport {\r\n  watchSendImages,\r\n  watchRoundOver,\r\n  sortPlayersByScore,\r\n} from \"../utility/socketFunctions\";\r\n\r\nimport \"./GameContainer.css\";\r\nimport MapComponent from \"./MapComponent\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\nimport PanoramaComponent from \"./PanoramaComponent\";\r\nimport LeaderBoardComponent from \"./LeaderBoardComponent\";\r\n\r\nconst GameContainer = ({ socket }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [roundOver, setRoundOver] = useState(false);\r\n  const [playingAgainPressed, setPlayAgainPressed] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  const startCountDownTimer = useCallback(() => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownTimer2\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n    setCountdownStarted(true);\r\n  }, [countDownKey, timePerRound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    watchSendImages({\r\n      socket,\r\n      setGameOver,\r\n      setRoomName,\r\n      setCurrentRound,\r\n      setNumberOfRounds,\r\n      setTimePerRound,\r\n      setTimerSeconds,\r\n      setPlayers,\r\n      setCurrentIndex,\r\n      setImageUrls,\r\n      setImgUrl,\r\n      setImageLoaded,\r\n      setDistance,\r\n      setGuessSent,\r\n      startCountDownTimer,\r\n      setRoundOver,\r\n      setRoundPosition,\r\n    });\r\n\r\n    watchRoundOver({\r\n      socket,\r\n      setPlayerName,\r\n      setPlayers,\r\n      setRoundPosition,\r\n      setDistance,\r\n      setIsLeader,\r\n      setCountdownStarted,\r\n      setRoundOver,\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      setGameOver(false);\r\n      setDistance(-1);\r\n      setPlayAgainPressed(false);\r\n      setRoundOver(false);\r\n      setRoundPosition(undefined);\r\n    });\r\n  }, [socket, startCountDownTimer]);\r\n\r\n  const handlePlayAgain = () => {\r\n    setPlayAgainPressed(true);\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  const RenderPlayAgainBtn = () => {\r\n    if (playingAgainPressed) {\r\n      return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handlePlayAgain}\r\n        className={classes.buttonGreen}\r\n      >\r\n        Play again\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <RenderPlayAgainBtn />\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div\r\n            id=\"info-container\"\r\n            style={{ padding: 15, textAlign: \"center\", position: \"relevant\" }}\r\n          >\r\n            <div\r\n              id=\"count-down-container\"\r\n              style={{\r\n                margin: \"auto\",\r\n                position: \"absolute\",\r\n                top: 90,\r\n                left: 10,\r\n              }}\r\n            >\r\n              <CountdownCircleTimer\r\n                key={countDownKey}\r\n                isPlaying={countdownStarted}\r\n                size={70}\r\n                duration={timerSeconds}\r\n                colors={[\r\n                  [\"#004777\", 0.33],\r\n                  [\"#F7B801\", 0.33],\r\n                  [\"#A30000\", 0.33],\r\n                ]}\r\n              >\r\n                {({ remainingTime }) => remainingTime}\r\n              </CountdownCircleTimer>\r\n            </div>\r\n            <img className={classes.icon} src={icon} alt=\"jjicon\" />\r\n            <Typography>\r\n              Round {currentRound} of {numberOfRounds}\r\n            </Typography>\r\n          </div>\r\n          <PanoramaComponent\r\n            imgUrl={imgUrl}\r\n            imageUrls={imageUrls}\r\n            currentIndex={currentIndex}\r\n            setCurrentIndex={setCurrentIndex}\r\n            setImgUrl={setImgUrl}\r\n            guessSent={guessSent}\r\n          />\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n            players={players}\r\n            playerName={playerName}\r\n            roundOver={roundOver}\r\n            setRoundOver={setRoundOver}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <LeaderBoardComponent players={players} roomName={roomName} />\r\n      )}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default GameContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [onlyPano, setOnlyPano] = useState(true);\r\n  const [onlyEuropeUsa, setOnlyEuropeUsa] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", {\r\n        timePerRound,\r\n        numberOfRounds,\r\n        onlyPano,\r\n        onlyEuropeUsa,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Paper elevation={1} className={classes.cardContainer}>\r\n        <h3>Waiting room</h3>\r\n        <h5>Room {roomName}</h5>\r\n        <Typography>\r\n          To play with your friends, tell them to write '{roomName}' in the room\r\n          inputbox and press connect!\r\n        </Typography>\r\n        <Typography>Players in room</Typography>\r\n        <List style={{ width: 200, margin: \"auto\" }}>\r\n          {players.map((player, i) => {\r\n            return (\r\n              <React.Fragment key={`${player.name}-${i}`}>\r\n                <ListItem>\r\n                  <ListItemText>{player.name}</ListItemText>\r\n                  {player.isLeader ? (\r\n                    <ListItemIcon>\r\n                      <ChildCare />\r\n                    </ListItemIcon>\r\n                  ) : (\r\n                    <ListItemText />\r\n                  )}\r\n                </ListItem>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </List>\r\n        {isLeader ? (\r\n          <React.Fragment>\r\n            <br />\r\n            <br />\r\n            <Typography>Number of Rounds</Typography>\r\n            <TextField\r\n              id=\"numberofrounds-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"Number of rounds\"\r\n              value={numberOfRounds}\r\n              onChange={(e) => setNumberOfRounds(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Typography>Seconds per round</Typography>\r\n            <TextField\r\n              id=\"timeperround-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"seconds per round\"\r\n              value={timePerRound}\r\n              onChange={(e) => setTimePerRound(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={onlyPano}\r\n                  onChange={() => {\r\n                    setOnlyPano(!onlyPano);\r\n                  }}\r\n                />\r\n              }\r\n              label=\"Use only panoramas?\"\r\n            />\r\n            {/**\r\n          * \r\n             <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  value={onlyEuropeUsa}\r\n                  onChange={() => setOnlyEuropeUsa(!onlyEuropeUsa)}\r\n                />\r\n              }\r\n              label=\"Use only 40+ latitude?\"\r\n            />\r\n              */}\r\n            <br />\r\n            <br />\r\n            <Button\r\n              onClick={handleStartGame}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start Game\r\n            </Button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <Typography>Waiting for leader to start the game.</Typography>\r\n        )}\r\n      </Paper>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport GameContainer from \"./components/GameContainer\";\r\nimport WaitingRoomComponent from \"./components/WaitingRoomComponent\";\r\nimport { config } from \"./config\";\r\n\r\nconst ENDPOINT = config.ENDPOINT;\r\n\r\nexport const frontPagePath = \"/\";\r\nexport const gamePagePath = \"/game\";\r\nexport const waitingPagePath = \"/waitingroom\";\r\n\r\nconst Routes = () => {\r\n  const [socket, setSocket] = useState(undefined);\r\n  useEffect(() => {\r\n    const newSocket = socketIOClient.connect(ENDPOINT);\r\n    setSocket(newSocket);\r\n    newSocket.on(\"connectedToRoomCallBack\", (data) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={frontPagePath}\r\n        render={(props) => <FrontPage {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={gamePagePath}\r\n        render={(props) => <GameContainer {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={waitingPagePath}\r\n        render={(props) => <WaitingRoomComponent {...props} socket={socket} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const config = {\r\n  ENDPOINT:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? window.location.hostname\r\n      : \"http://localhost:8000\",\r\n};\r\n","import { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/jeojuessr\">\n      <Routes />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}