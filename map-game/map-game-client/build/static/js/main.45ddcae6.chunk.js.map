{"version":3,"sources":["components/AppContainer.jsx","components/icon.png","components/FrontPage.jsx","components/MapComponent.jsx","components/ImageCompontent.jsx","components/WaitingRoomComponent.jsx","Routes.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["colors","useStyles","makeStyles","createStyles","root","flexGrow","minHeight","position","backgroundColor","menuButton","marginRight","title","header","footer","fontSize","margin","color","bottom","width","height","padding","marginTop","footerContent","container","paddingTop","paddingBottom","buttonGreen","background","cardContainer","textAlign","marginBottom","icon","AppContainer","children","classes","className","AppBar","Toolbar","FrontPage","socket","props","useState","roomName","setRoomName","playerName","setPlayerName","style","src","alt","Card","CardContent","TextField","id","placeholder","value","onChange","e","target","Button","variant","onClick","emit","history","push","waitingPagePath","MapComponent","setImageUrls","imageLoaded","guessSentCallback","isLeader","distance","roundPosition","setGuessSent","guessSent","players","roundOver","setRoundOver","lat","lng","markerPos","setMarkerPos","defaultIcon","correctIcon","L","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","CorrectMarker","Marker","LineBetweenMarkers","Polyline","positions","MyMarker","useMapEvents","click","console","log","latlng","map","player","markerPosition","name","Popup","startNextRound","StartNextRoundButton","Typography","MapContainer","center","zoom","bounds","latLngBounds","latLng","TileLayer","attribution","url","Fragment","toLocaleString","correctLng","changeValue","Math","abs","getCorrectLng","greenButton","sortPlayersByScore","sort","a","b","score","ImageComponent","currentIndex","setCurrentIndex","imgUrl","setImgUrl","imageUrls","setImageLoaded","countdownStarted","setCountdownStarted","setPlayers","setIsLeader","setDistance","undefined","setRoundPosition","timerSeconds","setTimerSeconds","countDownKey","setCountDownKey","timePerRound","setTimePerRound","currentRound","setCurrentRound","numberOfRounds","setNumberOfRounds","gameOver","setGameOver","playingAgainPressed","setPlayAgainPressed","startCountDownTimer","useCallback","useEffect","on","data","gameData","_players","_timePerRound","_currentRound","_numberOfRounds","_roomName","myImageUrls","length","i","currKey","isGameLeader","correctPosition","_distance","_playerName","changeImage","newIndex","webGLContainer","document","getElementsByClassName","childNodes","removeChild","handlePlayAgain","PannellumRender","image","pitch","yaw","hfov","compass","autoLoad","RenderPlayAgainBtn","CircularProgress","top","left","isPlaying","size","duration","remainingTime","Paper","List","dense","ListItem","ListItemText","inset","listBackgroundColor","ListItemIcon","ChildCare","primary","WaitingRoomComponent","onlyPano","setOnlyPano","onlyEuropeUsa","setOnlyEuropeUsa","once","_isLeader","gamePagePath","elevation","type","FormControlLabel","control","Checkbox","checked","label","isNaN","ENDPOINT","window","location","hostname","Routes","setSocket","newSocket","socketIOClient","connect","exact","path","render","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.45ddcae6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, AppBar, Toolbar } from \"@material-ui/core\";\r\n\r\nexport const colors = [\r\n  \"#52BE80\",\r\n  \"#DAF7A6\",\r\n  \"#FFC300\",\r\n  \"#FF5733\",\r\n  \"#2C3E50\",\r\n  \"#5D6D7E\",\r\n];\r\nexport const backgroundCardColor = \"#F9EBEA\";\r\n\r\nexport const useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      minHeight: \"100vh\",\r\n      position: \"relative\",\r\n      backgroundColor: \"#D1F2EB\",\r\n    },\r\n    menuButton: {\r\n      marginRight: 20,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    header: {\r\n      backgroundColor: colors[0],\r\n    },\r\n    footer: {\r\n      backgroundColor: colors[0],\r\n      fontSize: 10,\r\n      margin: \"auto\",\r\n      color: \"white\",\r\n      position: \"absolute\",\r\n      bottom: 0,\r\n      width: \"100%\",\r\n      height: \"2.5rem\",\r\n      padding: 0,\r\n      marginTop: 20,\r\n    },\r\n    footerContent: {\r\n      margin: \"auto\",\r\n    },\r\n    container: {\r\n      paddingTop: 20,\r\n      paddingBottom: 100,\r\n    },\r\n    buttonGreen: {\r\n      background: colors[0],\r\n      color: \"white\",\r\n    },\r\n    cardContainer: {\r\n      margin: \"auto\",\r\n      width: 400,\r\n      backgroundColor: backgroundCardColor,\r\n      textAlign: \"center\",\r\n      padding: 20,\r\n      marginBottom: 20,\r\n      marginTop: 20,\r\n    },\r\n    icon: {\r\n      width: \"auto\",\r\n      height: 60,\r\n    },\r\n  })\r\n);\r\nconst AppContainer = ({ children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.header}>\r\n          <h3>JeoJuessr</h3>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.container}>{children}</div>\r\n      <Toolbar className={classes.footer}>\r\n        <div className={classes.footerContent}>footer stuff</div>\r\n      </Toolbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n","export default __webpack_public_path__ + \"static/media/icon.f293e650.png\";","import React, { useState } from \"react\";\r\nimport { Button, Card, CardContent, TextField } from \"@material-ui/core\";\r\nimport { waitingPagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\n\r\nconst FrontPage = ({ socket, ...props }) => {\r\n  const classes = useStyles();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const handleConnectToRoom = () => {\r\n    if (roomName === \"\" || playerName === \"\") return;\r\n    socket.emit(\"roomConnection\", { roomName, playerName });\r\n    props.history.push(waitingPagePath);\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <img className={classes.icon} src={icon} alt=\"joejuessrlogo\" />\r\n        <Card className={classes.cardContainer}>\r\n          <CardContent>\r\n            <p>Still in development</p>\r\n            <p>\r\n              Please write in 'Room Name' anything, then tell your friends to\r\n              write the same thing to play together. Or you can play by\r\n              yourself.\r\n            </p>\r\n            <p>\r\n              This is in development so there are probably hella bugs. ToDo: add\r\n              leaderboard. Make finding new positions better. Using open street\r\n              maps and Mapillary.\r\n            </p>\r\n\r\n            <TextField\r\n              id=\"player-text-field\"\r\n              placeholder=\"Name\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"room-text-field\"\r\n              placeholder=\"Room Name\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Button\r\n              className={classes.buttonGreen}\r\n              variant=\"contained\"\r\n              onClick={handleConnectToRoom}\r\n            >\r\n              Connect\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import React, { useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMapEvents,\r\n  Polyline,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst MapComponent = ({\r\n  socket,\r\n  setImageUrls,\r\n  imageLoaded,\r\n  guessSentCallback,\r\n  isLeader,\r\n  distance,\r\n  roundPosition,\r\n  setGuessSent,\r\n  guessSent,\r\n  players,\r\n  playerName,\r\n  roundOver,\r\n  setRoundOver,\r\n}) => {\r\n  const position = [51.505, -0.09];\r\n  const [markerPos, setMarkerPos] = useState({ lat: 51.505, lng: -0.09 });\r\n  const classes = useStyles();\r\n  const defaultIcon = (correctIcon) =>\r\n    L.icon({\r\n      iconUrl: correctIcon\r\n        ? icon\r\n        : \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\",\r\n      shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const otherPlayersIcon = () =>\r\n    L.icon({\r\n      iconUrl:\r\n        \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png\",\r\n      // shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const CorrectMarker = () => {\r\n    if (!roundPosition) return null;\r\n    return <Marker icon={defaultIcon(true)} position={roundPosition} />;\r\n  };\r\n\r\n  const LineBetweenMarkers = () => {\r\n    if (!roundPosition) return null;\r\n    return (\r\n      <Polyline\r\n        positions={[\r\n          [roundPosition.lat, roundPosition.lng],\r\n          [markerPos.lat, markerPos.lng],\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const MyMarker = () => {\r\n    useMapEvents({\r\n      click(e) {\r\n        console.log(\"map clicked\", e.latlng);\r\n        if (!roundOver) {\r\n          setMarkerPos({ lat: e.latlng.lat, lng: e.latlng.lng });\r\n        }\r\n      },\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <Marker icon={defaultIcon(false)} position={markerPos} />\r\n        {roundOver && <CorrectMarker />}\r\n        {roundOver && <LineBetweenMarkers />}\r\n        {players.map((player) => {\r\n          if (player.markerPosition && player.name !== playerName) {\r\n            return (\r\n              <Marker\r\n                icon={otherPlayersIcon()}\r\n                position={player.markerPosition}\r\n                key={player.name}\r\n              >\r\n                <Popup>{player.name}</Popup>\r\n              </Marker>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCorrectLng = (lng) => {\r\n    let changeValue = 0;\r\n    if (lng < 180) {\r\n      changeValue = 360;\r\n    } else if (lng > 180) {\r\n      changeValue = -360;\r\n    }\r\n    while (Math.abs(lng) > 180) {\r\n      lng += changeValue;\r\n    }\r\n    return lng;\r\n  };\r\n\r\n  const handleGuessSent = () => {\r\n    guessSentCallback();\r\n    setGuessSent(true);\r\n    const correctLng = getCorrectLng(+markerPos.lng);\r\n    socket.emit(\"handleSendGuess\", {\r\n      position: { lat: markerPos.lat, lng: correctLng },\r\n    });\r\n  };\r\n\r\n  const startNextRound = () => {\r\n    socket.emit(\"handleStartNextRound\", {});\r\n    setImageUrls([]);\r\n    setGuessSent(false);\r\n    setRoundOver(false);\r\n  };\r\n\r\n  const StartNextRoundButton = () => {\r\n    if ((guessSent && roundPosition) || roundOver) {\r\n      if (isLeader) {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Button\r\n              onClick={startNextRound}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start next round\r\n            </Button>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Typography>Waiting for leader to start next round</Typography>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <MapContainer\r\n        center={position}\r\n        zoom={2}\r\n        style={{\r\n          height: 400,\r\n          width: \"70%\",\r\n          margin: \"auto\",\r\n          marginBottom: 15,\r\n        }}\r\n        bounds={L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180))}\r\n      >\r\n        <MyMarker />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\"\r\n        />\r\n      </MapContainer>\r\n\r\n      {roundPosition && (\r\n        <React.Fragment>\r\n          {distance !== -1 ? (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You were {distance.toLocaleString()} KM from the correct position.\r\n            </Typography>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You did not guess this round.\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n      {imageLoaded && !roundPosition && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Button\r\n            onClick={handleGuessSent}\r\n            variant=\"contained\"\r\n            className={classes.greenButton}\r\n          >\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {guessSent && !roundPosition && (\r\n        <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n          <Typography>Waiting for other players to finish.</Typography>\r\n        </div>\r\n      )}\r\n      <StartNextRoundButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Pannellum } from \"pannellum-react\";\r\n\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport {\r\n  CircularProgress,\r\n  ListItemText,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Button,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport \"./ImageComponent.css\";\r\nimport MapComponent from \"./MapComponent\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\n\r\nconst sortPlayersByScore = (players) => {\r\n  return players.sort((a, b) => {\r\n    if (a.score < b.score) return 1;\r\n    if (a.score > b.score) return -1;\r\n    return 0;\r\n  });\r\n};\r\n\r\nconst ImageComponent = ({ socket }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [roundOver, setRoundOver] = useState(false);\r\n  const [playingAgainPressed, setPlayAgainPressed] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  // 1024 640 or 2048\r\n  const getImageUrlFromKey = (key) => {\r\n    const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n    // setImgUrl(_imgUrl);\r\n    return _imgUrl;\r\n  };\r\n\r\n  const startCountDownTimer = useCallback(() => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownTimer2\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n    setCountdownStarted(true);\r\n  }, [countDownKey, timePerRound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"handleSendImages\", (data) => {\r\n      setGameOver(false);\r\n      const { gameData } = data;\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      const _timePerRound = data[\"timePerRound\"];\r\n      const _currentRound = data[\"currentRound\"];\r\n      const _numberOfRounds = data[\"numberOfRounds\"];\r\n      const _roomName = data[\"roomName\"];\r\n      setRoomName(_roomName);\r\n      setCurrentRound(_currentRound);\r\n      setNumberOfRounds(_numberOfRounds);\r\n      setTimePerRound(_timePerRound);\r\n      setTimerSeconds(_timePerRound);\r\n      setPlayers(_players);\r\n      const myImageUrls = [];\r\n      if (gameData[\"features\"].length > 0) {\r\n        for (let i = 0; i < gameData[\"features\"].length; i++) {\r\n          const item = gameData[\"features\"][i];\r\n          const currKey = item[\"properties\"][\"key\"];\r\n          const url = getImageUrlFromKey(currKey);\r\n          myImageUrls.push(url);\r\n        }\r\n        setCurrentIndex(0);\r\n        setImageUrls(myImageUrls);\r\n        setImgUrl(myImageUrls[0]);\r\n        setImageLoaded(true);\r\n        setRoundPosition(undefined);\r\n        setDistance(-1);\r\n        setGuessSent(false);\r\n        startCountDownTimer();\r\n        setRoundOver(false);\r\n      }\r\n    });\r\n\r\n    socket.on(\"handleRoundOver\", (data) => {\r\n      const { isGameLeader, correctPosition } = data;\r\n\r\n      const _distance = data[\"distance\"];\r\n      const _players = data[\"players\"];\r\n      const _playerName = data[\"playerName\"];\r\n      setPlayerName(_playerName);\r\n      setPlayers(_players);\r\n      setRoundPosition(correctPosition);\r\n      setDistance(_distance);\r\n\r\n      setIsLeader(isGameLeader);\r\n      setCountdownStarted(false);\r\n      setRoundOver(true);\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      setGameOver(false);\r\n      setDistance(-1);\r\n      setPlayAgainPressed(false);\r\n      setRoundOver(false);\r\n      setRoundPosition(undefined);\r\n    });\r\n  }, [socket, startCountDownTimer]);\r\n\r\n  const changeImage = (newIndex) => {\r\n    // delete webGL so its doesn't load stuff we dont want\r\n    const webGLContainer = document.getElementsByClassName(\r\n      \"pnlm-render-container\"\r\n    )[0];\r\n    while (webGLContainer.childNodes.length > 0) {\r\n      webGLContainer.removeChild(webGLContainer.childNodes[0]);\r\n    }\r\n    setImgUrl(imageUrls[newIndex]);\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const handlePlayAgain = () => {\r\n    setPlayAgainPressed(true);\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  const PannellumRender = () => {\r\n    return (\r\n      <Pannellum\r\n        width=\"100%\"\r\n        height=\"500px\"\r\n        image={imgUrl}\r\n        pitch={10}\r\n        yaw={180}\r\n        hfov={110}\r\n        compass\r\n        autoLoad\r\n      />\r\n    );\r\n  };\r\n\r\n  const RenderPlayAgainBtn = () => {\r\n    if (playingAgainPressed) {\r\n      return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handlePlayAgain}\r\n        className={classes.buttonGreen}\r\n      >\r\n        Play again\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <RenderPlayAgainBtn />\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div\r\n            id=\"info-container\"\r\n            style={{ padding: 15, textAlign: \"center\", position: \"relevant\" }}\r\n          >\r\n            <div\r\n              id=\"count-down-container\"\r\n              style={{\r\n                margin: \"auto\",\r\n                position: \"absolute\",\r\n                top: 90,\r\n                left: 10,\r\n              }}\r\n            >\r\n              <CountdownCircleTimer\r\n                key={countDownKey}\r\n                isPlaying={countdownStarted}\r\n                size={70}\r\n                duration={timerSeconds}\r\n                colors={[\r\n                  [\"#004777\", 0.33],\r\n                  [\"#F7B801\", 0.33],\r\n                  [\"#A30000\", 0.33],\r\n                ]}\r\n              >\r\n                {({ remainingTime }) => remainingTime}\r\n              </CountdownCircleTimer>\r\n            </div>\r\n            <img className={classes.icon} src={icon} alt=\"jjicon\" />\r\n            <Typography>\r\n              Round {currentRound} of {numberOfRounds}\r\n            </Typography>\r\n          </div>\r\n          {imageUrls.length > 0 ? (\r\n            <div className=\"pano-container\">\r\n              <Typography style={{ textAlign: \"center\" }}>\r\n                {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n              </Typography>\r\n              <button\r\n                className=\"pano-btn\"\r\n                id=\"pano-prev-btn\"\r\n                onClick={decIndex}\r\n              >\r\n                <i className=\"arrow arrow-left\"></i>\r\n              </button>\r\n              <button\r\n                className=\"pano-btn arrow-right\"\r\n                id=\"pano-next-btn\"\r\n                onClick={incIndex}\r\n              >\r\n                <i className=\"arrow\"></i>\r\n              </button>\r\n\r\n              <PannellumRender />\r\n            </div>\r\n          ) : !guessSent ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\" }}>\r\n              Waiting for leader to start round.\r\n            </Typography>\r\n          )}\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n            players={players}\r\n            playerName={playerName}\r\n            roundOver={roundOver}\r\n            setRoundOver={setRoundOver}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <Paper className={classes.cardContainer}>\r\n          <Typography variant=\"h6\">Players in room {roomName}</Typography>\r\n          <List dense={false} style={{ width: 400, margin: \"auto\" }}>\r\n            <ListItem>\r\n              <ListItemText inset>Name</ListItemText>\r\n              <ListItemText>Score</ListItemText>\r\n            </ListItem>\r\n            {players.map((player, i) => {\r\n              const listBackgroundColor = i % 2 === 0 ? \"#ffeeee\" : \"inherit\";\r\n              return (\r\n                <React.Fragment key={`${player.name}-${i}`}>\r\n                  <ListItem style={{ backgroundColor: listBackgroundColor }}>\r\n                    {player.isLeader && (\r\n                      <ListItemIcon>\r\n                        <ChildCare />\r\n                      </ListItemIcon>\r\n                    )}\r\n                    <ListItemText\r\n                      inset={!player.isLeader}\r\n                      primary={player.name}\r\n                    />\r\n                    <ListItemText primary={(+player.score).toLocaleString()} />\r\n                  </ListItem>\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default ImageComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [onlyPano, setOnlyPano] = useState(true);\r\n  const [onlyEuropeUsa, setOnlyEuropeUsa] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", {\r\n        timePerRound,\r\n        numberOfRounds,\r\n        onlyPano,\r\n        onlyEuropeUsa,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Paper elevation={1} className={classes.cardContainer}>\r\n        <h3>Waiting room</h3>\r\n        <h5>Room {roomName}</h5>\r\n        <Typography>\r\n          To play with your friends, tell them to write '{roomName}' in the room\r\n          inputbox and press connect!\r\n        </Typography>\r\n        <Typography>Players in room</Typography>\r\n        <List style={{ width: 200, margin: \"auto\" }}>\r\n          {players.map((player, i) => {\r\n            return (\r\n              <React.Fragment key={`${player.name}-${i}`}>\r\n                <ListItem>\r\n                  <ListItemText>{player.name}</ListItemText>\r\n                  {player.isLeader ? (\r\n                    <ListItemIcon>\r\n                      <ChildCare />\r\n                    </ListItemIcon>\r\n                  ) : (\r\n                    <ListItemText />\r\n                  )}\r\n                </ListItem>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </List>\r\n        {isLeader ? (\r\n          <React.Fragment>\r\n            <br />\r\n            <br />\r\n            <Typography>Number of Rounds</Typography>\r\n            <TextField\r\n              id=\"numberofrounds-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"Number of rounds\"\r\n              value={numberOfRounds}\r\n              onChange={(e) => setNumberOfRounds(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Typography>Seconds per round</Typography>\r\n            <TextField\r\n              id=\"timeperround-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"seconds per round\"\r\n              value={timePerRound}\r\n              onChange={(e) => setTimePerRound(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={onlyPano}\r\n                  onChange={() => {\r\n                    setOnlyPano(!onlyPano);\r\n                  }}\r\n                />\r\n              }\r\n              label=\"Use only panoramas?\"\r\n            />\r\n            <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  value={onlyEuropeUsa}\r\n                  onChange={() => setOnlyEuropeUsa(!onlyEuropeUsa)}\r\n                />\r\n              }\r\n              label=\"Use only 40+ latitude?\"\r\n            />\r\n            <br />\r\n            <br />\r\n            <Button\r\n              onClick={handleStartGame}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start Game\r\n            </Button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <Typography>Waiting for leader to start the game.</Typography>\r\n        )}\r\n      </Paper>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ImageComponent from \"./components/ImageCompontent\";\r\nimport WaitingRoomComponent from \"./components/WaitingRoomComponent\";\r\nimport { config } from \"./config\";\r\n\r\nconst ENDPOINT = config.ENDPOINT;\r\n\r\nexport const frontPagePath = \"/\";\r\nexport const gamePagePath = \"/game\";\r\nexport const waitingPagePath = \"/waitingroom\";\r\n\r\nconst Routes = () => {\r\n  const [socket, setSocket] = useState(undefined);\r\n  useEffect(() => {\r\n    const newSocket = socketIOClient.connect(ENDPOINT);\r\n    setSocket(newSocket);\r\n    newSocket.on(\"connectedToRoomCallBack\", (data) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={frontPagePath}\r\n        render={(props) => <FrontPage {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={gamePagePath}\r\n        render={(props) => <ImageComponent {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={waitingPagePath}\r\n        render={(props) => <WaitingRoomComponent {...props} socket={socket} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const config = {\r\n  ENDPOINT:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? window.location.hostname\r\n      : \"http://localhost:8000\",\r\n};\r\n","import { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/map-game\">\n      <Routes />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}