{"version":3,"sources":["components/AppContainer.jsx","components/icon.png","components/FrontPage.jsx","utility/socketFunctions.js","components/MapComponent.jsx","components/PanoramaComponent.jsx","components/LeaderBoardComponent.jsx","components/GameContainer.jsx","components/WaitingRoomComponent.jsx","Routes.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["colors","useStyles","makeStyles","createStyles","root","flexGrow","minHeight","position","backgroundColor","menuButton","marginRight","title","header","footer","fontSize","margin","color","bottom","width","height","padding","marginTop","footerContent","container","paddingTop","paddingBottom","buttonGreen","background","cardContainer","textAlign","marginBottom","icon","AppContainer","children","classes","className","AppBar","Toolbar","FrontPage","socket","props","useState","roomName","setRoomName","playerName","setPlayerName","snackOpen","setSnackOpen","snackMessage","setSnackMessage","snackStatus","setSnackStatus","useEffect","Snackbar","open","autoHideDuration","onClose","Alert","elevation","variant","severity","style","src","alt","Card","CardContent","TextField","id","placeholder","value","onChange","e","target","Button","onClick","emit","on","data","history","push","waitingPagePath","sortPlayersByScore","players","sort","a","b","score","playerConnectedCheck","frontPagePath","MapComponent","setImageUrls","imageLoaded","guessSentCallback","isLeader","distance","roundPosition","setGuessSent","guessSent","roundOver","setRoundOver","lat","lng","setPosition","markerPos","setMarkerPos","defaultIcon","correctIcon","L","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","CorrectMarker","Marker","LineBetweenMarkers","Polyline","positions","around","num","Math","round","SetNormalizedPosition","normposition","myMap","useMap","currCenter","getCenter","newLng","getCorrectLng","setView","MyMarker","useMapEvents","click","latMax","max","latlng","latMin","min","lngMax","lngMin","console","log","mouseup","map","player","markerPosition","name","Popup","changeValue","abs","startNextRound","StartNextRoundButton","Typography","correctLng","greenButton","Fragment","toLocaleString","MapContainer","center","zoom","bounds","latLngBounds","latLng","TileLayer","attribution","url","PanoramaComponent","imageUrls","currentIndex","setCurrentIndex","imageData","undefined","viewer","setViewer","spehereRef","React","createRef","changeImage","newIndex","setPanorama","then","length","viewer2","Viewer","current","panorama","navbar","loadingTxt","displayPano","display","ref","CircularProgress","LeaderBoardComponent","Paper","List","dense","ListItem","ListItemText","inset","i","listBackgroundColor","ListItemIcon","ChildCare","primary","GameContainer","imgUrl","setImgUrl","setImageLoaded","countdownStarted","setCountdownStarted","setPlayers","setIsLeader","setDistance","setRoundPosition","timerSeconds","setTimerSeconds","countDownKey","setCountDownKey","timePerRound","setTimePerRound","currentRound","setCurrentRound","numberOfRounds","setNumberOfRounds","gameOver","setGameOver","playingAgainPressed","setPlayAgainPressed","setImageData","startCountDownTimer","useCallback","gameData","_players","_timePerRound","_currentRound","_numberOfRounds","_roomName","myImageUrls","currKey","watchSendImages","isGameLeader","correctPosition","_distance","_playerName","watchRoundOver","handlePlayAgain","RenderPlayAgainBtn","top","left","isPlaying","size","duration","remainingTime","WaitingRoomComponent","onlyPano","setOnlyPano","onlyEuropeUsa","once","_isLeader","gamePagePath","type","FormControlLabel","control","Checkbox","checked","label","isNaN","ENDPOINT","window","location","hostname","Routes","setSocket","newSocket","socketIOClient","connect","exact","path","render","App","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8f46b38c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, AppBar, Toolbar } from \"@material-ui/core\";\r\n\r\nexport const colors = [\r\n  \"#52BE80\",\r\n  \"#DAF7A6\",\r\n  \"#FFC300\",\r\n  \"#FF5733\",\r\n  \"#2C3E50\",\r\n  \"#5D6D7E\",\r\n];\r\nexport const backgroundCardColor = \"#F9EBEA\";\r\n\r\nexport const useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      minHeight: \"100vh\",\r\n      position: \"relative\",\r\n      backgroundColor: \"#D1F2EB\",\r\n    },\r\n    menuButton: {\r\n      marginRight: 20,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    header: {\r\n      backgroundColor: colors[0],\r\n    },\r\n    footer: {\r\n      backgroundColor: colors[0],\r\n      fontSize: 10,\r\n      margin: \"auto\",\r\n      color: \"white\",\r\n      position: \"absolute\",\r\n      bottom: 0,\r\n      width: \"100%\",\r\n      height: \"2.5rem\",\r\n      padding: 0,\r\n      marginTop: 20,\r\n    },\r\n    footerContent: {\r\n      margin: \"auto\",\r\n    },\r\n    container: {\r\n      paddingTop: 20,\r\n      paddingBottom: 100,\r\n    },\r\n    buttonGreen: {\r\n      background: colors[0],\r\n      color: \"white\",\r\n    },\r\n    cardContainer: {\r\n      margin: \"auto\",\r\n      width: 400,\r\n      backgroundColor: backgroundCardColor,\r\n      textAlign: \"center\",\r\n      padding: 20,\r\n      marginBottom: 20,\r\n      marginTop: 20,\r\n    },\r\n    icon: {\r\n      width: \"auto\",\r\n      height: 60,\r\n    },\r\n  })\r\n);\r\nconst AppContainer = ({ children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.header}>\r\n          <h3>JeoJuessr</h3>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.container}>{children}</div>\r\n      <Toolbar className={classes.footer}>\r\n        <div className={classes.footerContent}>footer stuff</div>\r\n      </Toolbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n","export default __webpack_public_path__ + \"static/media/icon.f293e650.png\";","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { waitingPagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\n\r\nconst FrontPage = ({ socket, ...props }) => {\r\n  const classes = useStyles();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [snackOpen, setSnackOpen] = useState(false);\r\n  const [snackMessage, setSnackMessage] = useState(\"\");\r\n  const [snackStatus, setSnackStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n  }, [socket]);\r\n\r\n  const handleConnectToRoom = () => {\r\n    if (roomName === \"\" || playerName === \"\") {\r\n      setSnackOpen(true);\r\n      setSnackStatus(\"error\");\r\n      setSnackMessage(\"Please fill in your name and room name\");\r\n      return;\r\n    }\r\n    socket.emit(\"roomConnection\", { roomName, playerName });\r\n    socket.on(\"roomConnectionCallback\", (data) => {\r\n      setSnackMessage(data[\"message\"]);\r\n      setSnackStatus(data[\"status\"]);\r\n      setSnackOpen(true);\r\n      if (data[\"status\"] === \"success\") {\r\n        props.history.push(waitingPagePath);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Snackbar\r\n        open={snackOpen}\r\n        autoHideDuration={5000}\r\n        onClose={() => setSnackOpen(false)}\r\n      >\r\n        <Alert\r\n          elevation={6}\r\n          variant=\"filled\"\r\n          severity={snackStatus}\r\n          onClose={() => setSnackOpen(false)}\r\n        >\r\n          {snackMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <img className={classes.icon} src={icon} alt=\"joejuessrlogo\" />\r\n        <Card className={classes.cardContainer}>\r\n          <CardContent>\r\n            <p>Still in development</p>\r\n            <p>\r\n              Please write in 'Room Name' anything, then tell your friends to\r\n              write the same thing to play together. Or you can play by\r\n              yourself.\r\n            </p>\r\n            <p>\r\n              This is in development so there are probably hella bugs. ToDo: add\r\n              leaderboard. Make finding new positions better. Using open street\r\n              maps and Mapillary.\r\n            </p>\r\n            <p>\r\n              It is possible to reconnect to a game by writing the exact same\r\n              name.\r\n            </p>\r\n\r\n            <TextField\r\n              id=\"player-text-field\"\r\n              placeholder=\"Name\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"room-text-field\"\r\n              placeholder=\"Room Name\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Button\r\n              className={classes.buttonGreen}\r\n              variant=\"contained\"\r\n              onClick={handleConnectToRoom}\r\n            >\r\n              Connect\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import { frontPagePath } from \"../Routes\";\r\n\r\nexport const sortPlayersByScore = (players) => {\r\n  return players.sort((a, b) => {\r\n    if (a.score < b.score) return 1;\r\n    if (a.score > b.score) return -1;\r\n    return 0;\r\n  });\r\n};\r\n\r\n// 1024 640 or 2048\r\nconst getImageUrlFromKey = (key) => {\r\n  const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n  return _imgUrl;\r\n};\r\n\r\nexport const watchSendImages = ({\r\n  socket,\r\n  setGameOver,\r\n  setRoomName,\r\n  setCurrentRound,\r\n  setNumberOfRounds,\r\n  setTimePerRound,\r\n  setTimerSeconds,\r\n  setPlayers,\r\n  setCurrentIndex,\r\n  setImageUrls,\r\n  setImgUrl,\r\n  setImageLoaded,\r\n  setDistance,\r\n  setGuessSent,\r\n  startCountDownTimer,\r\n  setRoundOver,\r\n  setRoundPosition,\r\n  setImageData,\r\n}) => {\r\n  socket.on(\"handleSendImages\", (data) => {\r\n    setGameOver(false);\r\n    const { gameData } = data;\r\n    let _players = data[\"players\"];\r\n    _players = sortPlayersByScore(_players);\r\n    const _timePerRound = data[\"timePerRound\"];\r\n    const _currentRound = data[\"currentRound\"];\r\n    const _numberOfRounds = data[\"numberOfRounds\"];\r\n    const _roomName = data[\"roomName\"];\r\n    setRoomName(_roomName);\r\n    setCurrentRound(_currentRound);\r\n    setNumberOfRounds(_numberOfRounds);\r\n    setTimePerRound(_timePerRound);\r\n    setTimerSeconds(_timePerRound);\r\n    setPlayers(_players);\r\n    const myImageUrls = [];\r\n    setImageData(gameData[\"features\"]);\r\n    if (gameData[\"features\"].length > 0) {\r\n      for (let i = 0; i < gameData[\"features\"].length; i++) {\r\n        const item = gameData[\"features\"][i];\r\n        const currKey = item[\"properties\"][\"key\"];\r\n        const url = getImageUrlFromKey(currKey);\r\n        myImageUrls.push(url);\r\n      }\r\n      setCurrentIndex(0);\r\n      setImageUrls(myImageUrls);\r\n      setImgUrl(myImageUrls[0]);\r\n      setImageLoaded(true);\r\n      setRoundPosition(undefined);\r\n      setDistance(-1);\r\n      setGuessSent(false);\r\n      startCountDownTimer();\r\n      setRoundOver(false);\r\n    }\r\n  });\r\n};\r\n\r\nexport const watchRoundOver = ({\r\n  socket,\r\n  setPlayerName,\r\n  setPlayers,\r\n  setRoundPosition,\r\n  setDistance,\r\n  setIsLeader,\r\n  setCountdownStarted,\r\n  setRoundOver,\r\n}) => {\r\n  socket.on(\"handleRoundOver\", (data) => {\r\n    const { isGameLeader, correctPosition } = data;\r\n\r\n    const _distance = data[\"distance\"];\r\n    const _players = data[\"players\"];\r\n    const _playerName = data[\"playerName\"];\r\n    setPlayerName(_playerName);\r\n    setPlayers(_players);\r\n    setRoundPosition(correctPosition);\r\n    setDistance(_distance);\r\n\r\n    setIsLeader(isGameLeader);\r\n    setCountdownStarted(false);\r\n    setRoundOver(true);\r\n  });\r\n};\r\n\r\nexport const playerConnectedCheck = (socket, props) => {\r\n  socket.emit(\"connectedToAnyRoom\");\r\n  socket.on(\"connectedToAnyRoomCallback\", (data) => {\r\n    if (data[\"playerNotConnectedToGame\"]) {\r\n      props.history.push(frontPagePath);\r\n    }\r\n  });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMapEvents,\r\n  useMap,\r\n  Polyline,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst MapComponent = ({\r\n  socket,\r\n  setImageUrls,\r\n  imageLoaded,\r\n  guessSentCallback,\r\n  isLeader,\r\n  distance,\r\n  roundPosition,\r\n  setGuessSent,\r\n  guessSent,\r\n  players,\r\n  playerName,\r\n  roundOver,\r\n  setRoundOver,\r\n}) => {\r\n  const [position, setPosition] = useState({ lat: 51.505, lng: -0.09 });\r\n  const [markerPos, setMarkerPos] = useState({ lat: 51.505, lng: -0.09 });\r\n  const classes = useStyles();\r\n  const defaultIcon = (correctIcon) =>\r\n    L.icon({\r\n      iconUrl: correctIcon\r\n        ? icon\r\n        : \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\",\r\n      shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const otherPlayersIcon = () =>\r\n    L.icon({\r\n      iconUrl:\r\n        \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png\",\r\n      // shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const CorrectMarker = () => {\r\n    if (!roundPosition) return null;\r\n    return <Marker icon={defaultIcon(true)} position={roundPosition} />;\r\n  };\r\n\r\n  const LineBetweenMarkers = () => {\r\n    if (!roundPosition) return null;\r\n    return (\r\n      <Polyline\r\n        positions={[\r\n          [roundPosition.lat, roundPosition.lng],\r\n          [markerPos.lat, markerPos.lng],\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const around = (num) => {\r\n    return Math.round(num * 100) / 100;\r\n  };\r\n\r\n  const SetNormalizedPosition = ({ normposition }) => {\r\n    const myMap = useMap();\r\n    const currCenter = myMap.getCenter();\r\n    if (currCenter.lng < -180 || currCenter.lng > 180) {\r\n      const newLng = getCorrectLng(currCenter.lng);\r\n      myMap.setView({ lat: currCenter.lat, lng: newLng });\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const MyMarker = () => {\r\n    useMapEvents({\r\n      click(e) {\r\n        let latMax = around(Math.max(e.latlng.lat, markerPos.lat));\r\n        let latMin = around(Math.min(e.latlng.lat, markerPos.lat));\r\n        let lngMax = around(Math.max(e.latlng.lng, markerPos.lng));\r\n        let lngMin = around(Math.min(e.latlng.lng, markerPos.lng));\r\n        console.log(`{ max: ${latMax}, min: ${latMin}, lngIntervals:[\r\n         { min: ${lngMin} , max:${lngMax} }\r\n        ] },`);\r\n        if (!roundOver) {\r\n          setMarkerPos({ lat: e.latlng.lat, lng: e.latlng.lng });\r\n        }\r\n      },\r\n      mouseup(e) {\r\n        setPosition(e.latlng);\r\n      },\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <Marker icon={defaultIcon(false)} position={markerPos} />\r\n        {roundOver && <CorrectMarker />}\r\n        {roundOver && <LineBetweenMarkers />}\r\n        {players.map((player) => {\r\n          if (player.markerPosition && player.name !== playerName) {\r\n            return (\r\n              <Marker\r\n                icon={otherPlayersIcon()}\r\n                position={player.markerPosition}\r\n                key={player.name}\r\n              >\r\n                <Popup>{player.name}</Popup>\r\n              </Marker>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCorrectLng = (lng) => {\r\n    let changeValue = 0;\r\n    if (lng < 180) {\r\n      changeValue = 360;\r\n    } else if (lng > 180) {\r\n      changeValue = -360;\r\n    }\r\n    while (Math.abs(lng) > 180) {\r\n      lng += changeValue;\r\n    }\r\n    return lng;\r\n  };\r\n\r\n  const handleGuessSent = () => {\r\n    guessSentCallback();\r\n    setGuessSent(true);\r\n    const correctLng = getCorrectLng(+markerPos.lng);\r\n    socket.emit(\"handleSendGuess\", {\r\n      position: { lat: markerPos.lat, lng: correctLng },\r\n    });\r\n  };\r\n\r\n  const startNextRound = () => {\r\n    socket.emit(\"handleStartNextRound\", {});\r\n    setImageUrls([]);\r\n    setGuessSent(false);\r\n    setRoundOver(false);\r\n  };\r\n\r\n  const StartNextRoundButton = () => {\r\n    if ((guessSent && roundPosition) || roundOver) {\r\n      if (isLeader) {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Button\r\n              onClick={startNextRound}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start next round\r\n            </Button>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Typography>Waiting for leader to start next round</Typography>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      {imageLoaded && !roundPosition && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>You have to send your guess</Typography>\r\n          <br />\r\n          <Button\r\n            onClick={handleGuessSent}\r\n            variant=\"contained\"\r\n            className={classes.greenButton}\r\n          >\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {roundPosition && (\r\n        <React.Fragment>\r\n          {distance !== -1 ? (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You were {distance.toLocaleString()} KM from the correct position.\r\n            </Typography>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You did not guess this round.\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {guessSent && !roundPosition && (\r\n        <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n          <Typography>Waiting for other players to finish.</Typography>\r\n        </div>\r\n      )}\r\n      <StartNextRoundButton />\r\n      <br />\r\n\r\n      <MapContainer\r\n        center={position}\r\n        zoom={2}\r\n        style={{\r\n          height: 400,\r\n          width: \"70%\",\r\n          margin: \"auto\",\r\n          marginBottom: 15,\r\n        }}\r\n        bounds={L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180))}\r\n      >\r\n        <SetNormalizedPosition normposition={position} />\r\n        <MyMarker />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\"\r\n        />\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport \"./GameContainer.css\";\r\nimport { Viewer } from \"photo-sphere-viewer\";\r\nimport \"photo-sphere-viewer/dist/photo-sphere-viewer.css\";\r\n\r\nconst PanoramaComponent = ({\r\n  imageUrls,\r\n\r\n  currentIndex,\r\n  setCurrentIndex,\r\n\r\n  guessSent,\r\n  imageData,\r\n}) => {\r\n  const [viewer, setViewer] = useState(undefined);\r\n  const spehereRef = React.createRef();\r\n\r\n  const changeImage = (newIndex) => {\r\n    // delete webGL so its doesn't load stuff we dont want\r\n\r\n    if (viewer) {\r\n      viewer.setPanorama(imageUrls[newIndex]).then(\r\n        () => {},\r\n        (e) => {\r\n          console.log(\"error\", e);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imageUrls.length > 0) {\r\n      if (!viewer) {\r\n        const viewer2 = new Viewer({\r\n          container: spehereRef.current,\r\n          panorama: imageUrls[0],\r\n          navbar: false,\r\n          loadingTxt: \"\",\r\n        });\r\n        setViewer(viewer2);\r\n      } else {\r\n        changeImage(0);\r\n      }\r\n    }\r\n  }, [imageUrls?.length]);\r\n\r\n  const displayPano = imageUrls.length > 0 ? \"block\" : \"none\";\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"pano-container\" style={{ display: displayPano }}>\r\n        <Typography style={{ textAlign: \"center\" }}>\r\n          {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n        </Typography>\r\n        <button className=\"pano-btn\" id=\"pano-prev-btn\" onClick={decIndex}>\r\n          <i className=\"arrow arrow-left\"></i>\r\n        </button>\r\n        <button\r\n          className=\"pano-btn arrow-right\"\r\n          id=\"pano-next-btn\"\r\n          onClick={incIndex}\r\n        >\r\n          <i className=\"arrow\"></i>\r\n        </button>\r\n        <div\r\n          style={{ height: 400, width: \"100%\" }}\r\n          id=\"viewer\"\r\n          ref={spehereRef}\r\n        ></div>\r\n      </div>\r\n      <div style={{ display: imageUrls.length > 0 ? \"none\" : \"block\" }}>\r\n        {!guessSent ? (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <CircularProgress />\r\n          </div>\r\n        ) : (\r\n          <Typography style={{ textAlign: \"center\" }}>\r\n            Waiting for leader to start round.\r\n          </Typography>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PanoramaComponent;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  ListItem,\r\n  List,\r\n  ListItemText,\r\n  ListItemIcon,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst LeaderBoardComponent = ({ players, roomName }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.cardContainer}>\r\n      <Typography variant=\"h6\">Players in room {roomName}</Typography>\r\n      <List dense={false} style={{ width: 400, margin: \"auto\" }}>\r\n        <ListItem>\r\n          <ListItemText inset>Name</ListItemText>\r\n          <ListItemText>Score</ListItemText>\r\n        </ListItem>\r\n        {players.map((player, i) => {\r\n          const listBackgroundColor = i % 2 === 0 ? \"#ffeeee\" : \"inherit\";\r\n          return (\r\n            <React.Fragment key={`${player.name}-${i}`}>\r\n              <ListItem style={{ backgroundColor: listBackgroundColor }}>\r\n                {player.isLeader && (\r\n                  <ListItemIcon>\r\n                    <ChildCare />\r\n                  </ListItemIcon>\r\n                )}\r\n                <ListItemText inset={!player.isLeader} primary={player.name} />\r\n                <ListItemText primary={(+player.score).toLocaleString()} />\r\n              </ListItem>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default LeaderBoardComponent;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { CircularProgress, Typography, Button } from \"@material-ui/core\";\r\nimport {\r\n  watchSendImages,\r\n  watchRoundOver,\r\n  sortPlayersByScore,\r\n} from \"../utility/socketFunctions\";\r\n\r\nimport \"./GameContainer.css\";\r\nimport MapComponent from \"./MapComponent\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\nimport PanoramaComponent from \"./PanoramaComponent\";\r\nimport LeaderBoardComponent from \"./LeaderBoardComponent\";\r\nimport { playerConnectedCheck } from \"../utility/socketFunctions\";\r\n\r\nconst GameContainer = ({ socket, ...props }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [roundOver, setRoundOver] = useState(false);\r\n  const [playingAgainPressed, setPlayAgainPressed] = useState(false);\r\n  const [imageData, setImageData] = useState([]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  const startCountDownTimer = useCallback(() => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownTimer2\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n    setCountdownStarted(true);\r\n  }, [countDownKey, timePerRound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    playerConnectedCheck(socket, props);\r\n\r\n    watchSendImages({\r\n      socket,\r\n      setGameOver,\r\n      setRoomName,\r\n      setCurrentRound,\r\n      setNumberOfRounds,\r\n      setTimePerRound,\r\n      setTimerSeconds,\r\n      setPlayers,\r\n      setCurrentIndex,\r\n      setImageUrls,\r\n      setImgUrl,\r\n      setImageLoaded,\r\n      setDistance,\r\n      setGuessSent,\r\n      startCountDownTimer,\r\n      setRoundOver,\r\n      setRoundPosition,\r\n      setImageData,\r\n    });\r\n\r\n    watchRoundOver({\r\n      socket,\r\n      setPlayerName,\r\n      setPlayers,\r\n      setRoundPosition,\r\n      setDistance,\r\n      setIsLeader,\r\n      setCountdownStarted,\r\n      setRoundOver,\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      setGameOver(false);\r\n      setDistance(-1);\r\n      setPlayAgainPressed(false);\r\n      setRoundOver(false);\r\n      setRoundPosition(undefined);\r\n    });\r\n  }, [socket, startCountDownTimer]);\r\n\r\n  const handlePlayAgain = () => {\r\n    setPlayAgainPressed(true);\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  const RenderPlayAgainBtn = () => {\r\n    if (playingAgainPressed) {\r\n      return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handlePlayAgain}\r\n        className={classes.buttonGreen}\r\n      >\r\n        Play again\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <RenderPlayAgainBtn />\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div\r\n            id=\"info-container\"\r\n            style={{ padding: 15, textAlign: \"center\", position: \"relevant\" }}\r\n          >\r\n            <div\r\n              id=\"count-down-container\"\r\n              style={{\r\n                margin: \"auto\",\r\n                position: \"absolute\",\r\n                top: 90,\r\n                left: 10,\r\n              }}\r\n            >\r\n              <CountdownCircleTimer\r\n                key={countDownKey}\r\n                isPlaying={countdownStarted}\r\n                size={70}\r\n                duration={timerSeconds}\r\n                colors={[\r\n                  [\"#004777\", 0.33],\r\n                  [\"#F7B801\", 0.33],\r\n                  [\"#A30000\", 0.33],\r\n                ]}\r\n              >\r\n                {({ remainingTime }) => remainingTime}\r\n              </CountdownCircleTimer>\r\n            </div>\r\n            <img className={classes.icon} src={icon} alt=\"jjicon\" />\r\n            <Typography>\r\n              Round {currentRound} of {numberOfRounds}\r\n            </Typography>\r\n          </div>\r\n          <PanoramaComponent\r\n            imgUrl={imgUrl}\r\n            imageUrls={imageUrls}\r\n            currentIndex={currentIndex}\r\n            setCurrentIndex={setCurrentIndex}\r\n            setImgUrl={setImgUrl}\r\n            guessSent={guessSent}\r\n            imageData={imageData}\r\n          />\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n            players={players}\r\n            playerName={playerName}\r\n            roundOver={roundOver}\r\n            setRoundOver={setRoundOver}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <LeaderBoardComponent players={players} roomName={roomName} />\r\n      )}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default GameContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport { playerConnectedCheck } from \"../utility/socketFunctions\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [onlyPano, setOnlyPano] = useState(true);\r\n  const [onlyEuropeUsa, setOnlyEuropeUsa] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      playerConnectedCheck(socket, props);\r\n\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", {\r\n        timePerRound,\r\n        numberOfRounds,\r\n        onlyPano,\r\n        onlyEuropeUsa,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Paper elevation={1} className={classes.cardContainer}>\r\n        <h3>Waiting room</h3>\r\n        <h5>Room {roomName}</h5>\r\n        <Typography>\r\n          To play with your friends, tell them to write '{roomName}' in the room\r\n          inputbox and press connect!\r\n        </Typography>\r\n        <Typography>Players in room</Typography>\r\n        <List style={{ width: 200, margin: \"auto\" }}>\r\n          {players.map((player, i) => {\r\n            return (\r\n              <React.Fragment key={`${player.name}-${i}`}>\r\n                <ListItem>\r\n                  <ListItemText>{player.name}</ListItemText>\r\n                  {player.isLeader ? (\r\n                    <ListItemIcon>\r\n                      <ChildCare />\r\n                    </ListItemIcon>\r\n                  ) : (\r\n                    <ListItemText />\r\n                  )}\r\n                </ListItem>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </List>\r\n        {isLeader ? (\r\n          <React.Fragment>\r\n            <br />\r\n            <br />\r\n            <Typography>Number of Rounds</Typography>\r\n            <TextField\r\n              id=\"numberofrounds-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"Number of rounds\"\r\n              value={numberOfRounds}\r\n              onChange={(e) => setNumberOfRounds(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Typography>Seconds per round</Typography>\r\n            <TextField\r\n              id=\"timeperround-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"seconds per round\"\r\n              value={timePerRound}\r\n              onChange={(e) => setTimePerRound(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={onlyPano}\r\n                  onChange={() => {\r\n                    setOnlyPano(!onlyPano);\r\n                  }}\r\n                />\r\n              }\r\n              label=\"Use only panoramas?\"\r\n            />\r\n            {/**\r\n          * \r\n             <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  value={onlyEuropeUsa}\r\n                  onChange={() => setOnlyEuropeUsa(!onlyEuropeUsa)}\r\n                />\r\n              }\r\n              label=\"Use only 40+ latitude?\"\r\n            />\r\n              */}\r\n            <br />\r\n            <br />\r\n            <Button\r\n              onClick={handleStartGame}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start Game\r\n            </Button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <Typography>Waiting for leader to start the game.</Typography>\r\n        )}\r\n      </Paper>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport GameContainer from \"./components/GameContainer\";\r\nimport WaitingRoomComponent from \"./components/WaitingRoomComponent\";\r\nimport { config } from \"./config\";\r\n\r\nconst ENDPOINT = config.ENDPOINT;\r\n\r\nexport const frontPagePath = \"/\";\r\nexport const gamePagePath = \"/game\";\r\nexport const waitingPagePath = \"/waitingroom\";\r\n\r\nconst Routes = () => {\r\n  const [socket, setSocket] = useState(undefined);\r\n  useEffect(() => {\r\n    const newSocket = socketIOClient.connect(ENDPOINT);\r\n    setSocket(newSocket);\r\n    newSocket.on(\"connectedToRoomCallBack\", (data) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={frontPagePath}\r\n        render={(props) => <FrontPage {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={gamePagePath}\r\n        render={(props) => <GameContainer {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={waitingPagePath}\r\n        render={(props) => <WaitingRoomComponent {...props} socket={socket} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const config = {\r\n  ENDPOINT:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? window.location.hostname\r\n      : \"http://localhost:80\",\r\n};\r\n","import { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/jeojuessr\">\n      <Routes />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}