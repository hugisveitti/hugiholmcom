{"version":3,"sources":["components/FrontPage.jsx","components/MapComponent.jsx","components/ImageCompontent.jsx","components/WaitingRoomComponent.jsx","Routes.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["FrontPage","socket","props","useState","roomName","setRoomName","playerName","setPlayerName","style","textAlign","margin","width","TextField","id","placeholder","value","onChange","e","target","Button","variant","onClick","emit","history","push","waitingPagePath","MapComponent","setImageUrls","imageLoaded","guessSentCallback","isLeader","distance","roundPosition","setGuessSent","guessSent","players","lat","lng","markerPos","setMarkerPos","defaultIcon","correctIcon","L","icon","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","CorrectMarker","Marker","position","LineBetweenMarkers","Polyline","positions","MyMarker","useMapEvents","click","console","log","latlng","map","player","markerPosition","name","Popup","padding","MapContainer","center","zoom","height","marginBottom","TileLayer","attribution","url","Fragment","Typography","toLocaleString","paddingBottom","sortPlayersByScore","sort","a","b","score","ImageComponent","currentIndex","setCurrentIndex","imgUrl","setImgUrl","imageUrls","setImageLoaded","countdownStarted","setCountdownStarted","setPlayers","setIsLeader","setDistance","undefined","setRoundPosition","timerSeconds","setTimerSeconds","countDownKey","setCountDownKey","timePerRound","setTimePerRound","currentRound","setCurrentRound","numberOfRounds","setNumberOfRounds","gameOver","setGameOver","startCountDownTimer","useCallback","useEffect","on","data","gameData","_players","_timePerRound","_currentRound","_numberOfRounds","_roomName","myImageUrls","length","i","currKey","isGameLeader","correctPosition","_distance","_playerName","changeImage","newIndex","isPlaying","size","duration","colors","remainingTime","className","image","pitch","yaw","hfov","autoLoad","CircularProgress","List","ListItem","ListItemText","ListItemIcon","ChildCare","WaitingRoomComponent","onlyPano","setOnlyPano","once","_isLeader","gamePagePath","type","Checkbox","isNaN","ENDPOINT","window","location","hostname","Routes","setSocket","newSocket","socketIOClient","connect","exact","path","render","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uUAqDeA,EAjDG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAWC,EAAY,4BACVC,mBAAS,IADC,mBACnCC,EADmC,KACzBC,EADyB,OAENF,mBAAS,IAFH,mBAEnCG,EAFmC,KAEvBC,EAFuB,KAS1C,OACE,8BACE,sBAAKC,MAAO,CAAEC,UAAW,UAAzB,UACE,0CACA,qDACA,sBAAKD,MAAO,CAAEE,OAAQ,OAAQC,MAAO,KAArC,UACE,oKAIA,4LAMF,cAACC,EAAA,EAAD,CACEC,GAAG,oBACHC,YAAY,OACZC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAcU,EAAEC,OAAOH,UAE1C,uBACA,uBACA,cAACH,EAAA,EAAD,CACEC,GAAG,kBACHC,YAAY,YACZC,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAYY,EAAEC,OAAOH,UAExC,uBACA,uBACA,cAACI,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAtCL,WACT,KAAbjB,GAAkC,KAAfE,IACvBL,EAAOqB,KAAK,iBAAkB,CAAElB,WAAUE,eAC1CJ,EAAMqB,QAAQC,KAAKC,KAmCf,2B,6MCiIOC,EA/JM,SAAC,GAYf,IAXLzB,EAWI,EAXJA,OACA0B,EAUI,EAVJA,aACAC,EASI,EATJA,YACAC,EAQI,EARJA,kBACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAC,EAKI,EALJA,cACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,QACA7B,EACI,EADJA,WACI,EAE8BH,mBAAS,CAAEiC,IAAK,OAAQC,KAAM,MAF5D,mBAEGC,EAFH,KAEcC,EAFd,KAIEC,EAAc,SAACC,GAAD,OAClBC,IAAEC,KAAK,CACLC,QAASH,EACLE,IACA,oGACJE,UAAWC,IACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,OAYfC,EAAgB,WACpB,OAAKjB,EACE,cAACkB,EAAA,EAAD,CAAQP,KAAMH,GAAY,GAAOW,SAAUnB,IADvB,MAIvBoB,EAAqB,WACzB,OAAKpB,EAEH,cAACqB,EAAA,EAAD,CACEC,UAAW,CACT,CAACtB,EAAcI,IAAKJ,EAAcK,KAClC,CAACC,EAAUF,IAAKE,EAAUD,QALL,MAWvBkB,EAAW,WAQf,OAPAC,YAAa,CACXC,MADW,SACLxC,GACJyC,QAAQC,IAAI,cAAe1C,EAAE2C,QAC7BrB,EAAa,CAAEH,IAAKnB,EAAE2C,OAAOxB,IAAKC,IAAKpB,EAAE2C,OAAOvB,SAKlD,qCACE,cAACa,EAAA,EAAD,CAAQP,KAAMH,GAAY,GAAQW,SAAUb,IAC3CJ,GAAa,cAACe,EAAD,IACbf,GAAa,cAACkB,EAAD,IACbjB,EAAQ0B,KAAI,SAACC,GACZ,OAAIA,EAAOC,gBAAkBD,EAAOE,OAAS1D,EAEzC,cAAC4C,EAAA,EAAD,CACEP,KA1CZD,IAAEC,KAAK,CACLC,QACE,kGAEFG,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MAsCPG,SAAUW,EAAOC,eAFnB,SAKE,cAACE,EAAA,EAAD,UAAQH,EAAOE,QAFVF,EAAOE,MAMX,YAmBf,OACE,sBAAKxD,MAAO,CAAE0D,QAAS,IAAvB,UACE,eAACC,EAAA,EAAD,CACEC,OAtFW,CAAC,QAAS,KAuFrBC,KAAM,EACN7D,MAAO,CACL8D,OAAQ,IACR3D,MAAO,MACPD,OAAQ,OACR6D,aAAc,IAPlB,UAUE,cAAChB,EAAD,IACA,cAACiB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,0FAGP1C,GACC,cAAC,IAAM2C,SAAP,WACiB,IAAd5C,EACC,eAAC6C,EAAA,EAAD,CAAYpE,MAAO,CAAEC,UAAW,UAAhC,sBACYsB,EAAS8C,iBADrB,oCAIA,cAACD,EAAA,EAAD,CAAYpE,MAAO,CAAEC,UAAW,UAAhC,6CAMN,uBACCmB,IAAgBI,GACf,qBAAKxB,MAAO,CAAEC,UAAW,SAAUqE,cAAe,IAAlD,SACE,cAAC3D,EAAA,EAAD,CAAQE,QA/CQ,WACtBQ,IACAI,GAAa,GACbhC,EAAOqB,KAAK,kBAAmB,CAC7B6B,SAAU,CAAEf,IAAKE,EAAUF,IAAKC,IAAKC,EAAUD,QA2CTjB,QAAQ,YAA1C,oBAKHc,IAAcF,GACb,qBAAKxB,MAAO,CAAEC,UAAW,UAAzB,SACE,cAACmE,EAAA,EAAD,qDAGH1C,GAAaF,GACZ,cAAC,IAAM2C,SAAP,UACG7C,EACC,qBAAKtB,MAAO,CAAEC,UAAW,SAAUqE,cAAe,IAAlD,SACE,cAAC3D,EAAA,EAAD,CAAQE,QArDG,WACrBpB,EAAOqB,KAAK,uBAAwB,IACpCK,EAAa,IACbM,GAAa,IAkD8Bb,QAAQ,YAAzC,gCAKF,qBAAKZ,MAAO,CAAEC,UAAW,SAAUqE,cAAe,IAAlD,SACE,cAACF,EAAA,EAAD,6DCrJRG,EAAqB,SAAC5C,GAC1B,OAAOA,EAAQ6C,MAAK,SAACC,EAAGC,GACtB,OAAID,EAAEE,MAAQD,EAAEC,MAAc,EAC1BF,EAAEE,MAAQD,EAAEC,OAAe,EACxB,MAmQIC,EA/PQ,SAAC,GAAgB,IAAdnF,EAAa,EAAbA,OAAa,EACGE,mBAAS,GADZ,mBAC9BkF,EAD8B,KAChBC,EADgB,OAETnF,mBAAS,IAFA,mBAE9BoF,EAF8B,KAEtBC,EAFsB,OAGHrF,mBAAS,IAHN,mBAG9BsF,EAH8B,KAGnB9D,EAHmB,OAICxB,oBAAS,GAJV,mBAI9ByB,EAJ8B,KAIjB8D,EAJiB,OAKWvF,oBAAS,GALpB,mBAK9BwF,EAL8B,KAKZC,EALY,OAMPzF,mBAAS,IANF,mBAM9BgC,EAN8B,KAMrB0D,EANqB,OAOL1F,oBAAS,GAPJ,mBAO9B2B,EAP8B,KAOpBgE,EAPoB,OAQL3F,oBAAU,GARL,mBAQ9B4B,EAR8B,KAQpBgE,EARoB,OASK5F,wBAAS6F,GATd,mBAS9BhE,EAT8B,KASfiE,EATe,QAUG9F,mBAAS,IAVZ,qBAU9B+F,GAV8B,MAUhBC,GAVgB,SAWGhG,mBAAS,kBAXZ,qBAW9BiG,GAX8B,MAWhBC,GAXgB,SAYGlG,mBAAS,IAZZ,qBAY9BmG,GAZ8B,MAYhBC,GAZgB,SAaGpG,mBAAS,GAbZ,qBAa9BqG,GAb8B,MAahBC,GAbgB,SAcOtG,mBAAS,GAdhB,qBAc9BuG,GAd8B,MAcdC,GAdc,SAeLxG,oBAAS,GAfJ,qBAe9ByG,GAf8B,MAepBC,GAfoB,SAgBH1G,oBAAS,GAhBN,qBAgB9B+B,GAhB8B,MAgBnBD,GAhBmB,SAiBL9B,mBAAS,IAjBJ,qBAiB9BC,GAjB8B,MAiBpBC,GAjBoB,SAkBDF,mBAAS,IAlBR,qBAkB9BG,GAlB8B,MAkBlBC,GAlBkB,MA+B/BuG,GAAsBC,uBAAY,WAEpCV,GADmB,mBAAjBD,GACc,kBAEA,kBAElBD,GAAgBG,IAChBV,GAAoB,KACnB,CAACQ,GAAcE,KAElBU,qBAAU,WACH/G,IACLA,EAAOgH,GAAG,oBAAoB,SAACC,GAC7BL,IAAY,GAD0B,IAE9BM,EAAaD,EAAbC,SACJC,EAAWF,EAAI,QACnBE,EAAWrC,EAAmBqC,GAC9B,IAAMC,EAAgBH,EAAI,aACpBI,EAAgBJ,EAAI,aACpBK,EAAkBL,EAAI,eACtBM,EAAYN,EAAI,SACtB7G,GAAYmH,GACZf,GAAgBa,GAChBX,GAAkBY,GAClBhB,GAAgBc,GAChBlB,GAAgBkB,GAChBxB,EAAWuB,GACX,IAAMK,EAAc,GACpB,GAAIN,EAAQ,SAAaO,OAAS,EAAG,CACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAQ,SAAaO,OAAQC,IAAK,CACpD,IACMC,EADOT,EAAQ,SAAaQ,GACd,WAAJ,IACVjD,EArCC,uCAqCwBkD,EArCxB,mBAsCPH,EAAYjG,KAAKkD,GAEnBY,EAAgB,GAChB3D,EAAa8F,GACbjC,EAAUiC,EAAY,IACtB/B,GAAe,GACfO,OAAiBD,GACjBD,GAAa,GACb9D,IAAa,GACb6E,SAIJ7G,EAAOgH,GAAG,mBAAmB,SAACC,GAAU,IAC9BW,EAAkCX,EAAlCW,aAAcC,EAAoBZ,EAApBY,gBAEhBC,EAAYb,EAAI,SAChBE,EAAWF,EAAI,QACfc,EAAcd,EAAI,WACxB3G,GAAcyH,GACdnC,EAAWuB,GACXnB,EAAiB6B,GACjB/B,EAAYgC,GACZ9F,IAAa,GACb6D,EAAY+B,GACZlG,EAAa,IACbiE,GAAoB,MAGtB3F,EAAOgH,GAAG,kBAAkB,SAACC,GAC3B,IAAIE,EAAWF,EAAI,QACnBE,EAAWrC,EAAmBqC,GAC9BvB,EAAWuB,GACXP,IAAY,SAEb,CAAC5G,EAAQ6G,KAEZ,IAAMmB,GAAc,SAACC,GACnB1C,EAAUC,EAAUyC,KA+BtB,OACE,gCACGtB,GACC,sBAAKpG,MAAO,CAAEC,UAAW,UAAzB,UACE,2CACCqB,EACC,cAACX,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAVb,WACtBpB,EAAOqB,KAAK,kBAAmB,CAAEgF,gBAAcI,qBASvC,wBAIA,cAAC9B,EAAA,EAAD,mDAIJ,eAAC,IAAMD,SAAP,WACE,sBAAK9D,GAAG,4BAA4BL,MAAO,CAAE0D,QAAS,IAAtD,UACE,cAAC,uBAAD,CAEEiE,UAAWxC,EACXnF,MAAO,CAAEE,OAAQ,QACjB0H,KAAM,GACNC,SAAUnC,GACVoC,OAAQ,CACN,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAW,MAThB,SAYG,qBAAGC,gBAXCnC,IAaP,eAACxB,EAAA,EAAD,oBACS4B,GADT,OAC2BE,SAG5BjB,EAAUiC,OAAS,EAClB,sBAAKc,UAAU,iBAAf,UACE,eAAC5D,EAAA,EAAD,CAAYpE,MAAO,CAAEC,UAAW,UAAhC,UACG4E,EAAe,EADlB,MACwBI,EAAUiC,OAAQ,OAE1C,wBACEc,UAAU,WACV3H,GAAG,gBACHQ,QA1DG,WACf,IAAI6G,GAAY,EACK,IAAjB7C,GACFC,EAAgBG,EAAUiC,OAAS,GACnCQ,EAAWzC,EAAUiC,OAAS,IAE9BpC,EAAgBD,EAAe,GAC/B6C,EAAW7C,EAAe,GAE5B4C,GAAYC,IA8CF,SAKE,mBAAGM,UAAU,uBAEf,wBACEA,UAAU,uBACV3H,GAAG,gBACHQ,QA7EG,WACf,IAAI6G,GAAY,EACZ7C,IAAiBI,EAAUiC,OAAS,GACtCQ,EAAW,EACX5C,EAAgB,KAEhB4C,EAAW7C,EAAe,EAC1BC,EAAgBD,EAAe,IAEjC4C,GAAYC,IAiEF,SAKE,mBAAGM,UAAU,YAGf,cAAC,IAAD,CACE7H,MAAM,OACN2D,OAAO,QACPmE,MAAOlD,EACPmD,MAAO,GACPC,IAAK,IACLC,KAAM,IACNC,UAAQ,OAGT3G,GAKH,cAAC0C,EAAA,EAAD,CAAYpE,MAAO,CAAEC,UAAW,UAAhC,gDAJA,qBAAKD,MAAO,CAAEC,UAAW,UAAzB,SACE,cAACqI,EAAA,EAAD,MAOJ,cAAC,EAAD,CACE7I,OAAQA,EACR0B,aAAcA,EACdC,YAAaA,EACbC,kBA9LgB,WACxB6D,GAAe,IA8LP5D,SAAUA,EACVC,SAAUA,EACVC,cAAeA,EACfC,aAAcA,GACdC,UAAWA,GACXC,QAASA,EACT7B,WAAYA,QAIjB6B,EAAQuF,OAAS,GAChB,sBAAKlH,MAAO,CAAEC,UAAW,UAAzB,UACE,eAACmE,EAAA,EAAD,8BAA6BxE,MAC7B,eAAC2I,EAAA,EAAD,CAAMvI,MAAO,CAAEG,MAAO,IAAKD,OAAQ,QAAnC,UACE,eAACsI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,OAED9G,EAAQ0B,KAAI,SAACC,EAAQ6D,GACpB,OACE,cAAC,IAAMhD,SAAP,UACE,eAACqE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAenF,EAAOqB,QACtB,cAAC8D,EAAA,EAAD,UAAenF,EAAOE,OACrBF,EAAOhC,SACN,cAACoH,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,MAGF,cAACF,EAAA,EAAD,QATN,UAAwBnF,EAAOE,KAA/B,YAAuC2D,aAkBjD,2B,SC3JSyB,EAzGc,SAAC,GAA0B,IAAxBnJ,EAAuB,EAAvBA,OAAWC,EAAY,4BACrBC,mBAAS,IADY,mBAC9CC,EAD8C,KACpCC,EADoC,OAEvBF,mBAAS,IAFc,mBAE9CgC,EAF8C,KAErC0D,EAFqC,OAGrB1F,oBAAS,GAHY,mBAG9C2B,EAH8C,KAGpCgE,EAHoC,OAIT3F,mBAAS,GAJA,mBAI9CuG,EAJ8C,KAI9BC,EAJ8B,OAKbxG,mBAAS,IALI,mBAK9CmG,EAL8C,KAKhCC,EALgC,OAMrBpG,oBAAS,GANY,mBAM9CkJ,EAN8C,KAMpCC,EANoC,KAQrDtC,qBAAU,WACJ/G,IACFA,EAAOqB,KAAK,0BACZrB,EAAOsJ,KAAK,kCAAkC,SAACrC,GAC7C,IAAMM,EAAYN,EAAI,SAChBE,EAAWF,EAAI,QACfsC,EAAYtC,EAAI,SACtB7G,EAAYmH,GACZ1B,EAAY0D,GACZ3D,EAAWuB,MAGbnH,EAAOgH,GAAG,iBAAiB,SAACC,GAC1B,IAAME,EAAWF,EAAI,QACjBE,GACFvB,EAAWuB,MAIfnH,EAAOgH,GAAG,eAAe,WACvB/G,EAAMqB,QAAQC,KAAKiI,SAGtB,CAACxJ,EAAQC,EAAMqB,UAWlB,OACE,sBAAKf,MAAO,CAAEC,UAAW,UAAzB,UACE,8CACA,uCAAUL,KACV,cAACwE,EAAA,EAAD,8BACA,cAACmE,EAAA,EAAD,CAAMvI,MAAO,CAAEG,MAAO,IAAKD,OAAQ,QAAnC,SACGyB,EAAQ0B,KAAI,SAACC,EAAQ6D,GACpB,OACE,cAAC,IAAMhD,SAAP,UACE,eAACqE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAenF,EAAOE,OACrBF,EAAOhC,SACN,cAACoH,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,MAGF,cAACF,EAAA,EAAD,QARN,UAAwBnF,EAAOE,KAA/B,YAAuC2D,SAe5C7F,EACC,eAAC,IAAM6C,SAAP,WACE,uBACA,uBACA,cAACC,EAAA,EAAD,+BACA,cAAChE,EAAA,EAAD,CACEC,GAAG,4BACH6I,KAAK,SACL5I,YAAY,mBACZC,MAAO2F,EACP1F,SAAU,SAACC,GAAD,OAAO0F,EAAkB1F,EAAEC,OAAOH,UAE9C,uBACA,uBACA,cAAC6D,EAAA,EAAD,gCACA,cAAChE,EAAA,EAAD,CACEC,GAAG,0BACH6I,KAAK,SACL5I,YAAY,oBACZC,MAAOuF,EACPtF,SAAU,SAACC,GAAD,OAAOsF,EAAgBtF,EAAEC,OAAOH,UAE5C,uBACA,uBACA,cAAC6D,EAAA,EAAD,kCACA,cAAC+E,EAAA,EAAD,CAAU5I,MAAOsI,EAAUrI,SAAU,kBAAMsI,GAAaD,MACxD,uBACA,uBAEA,cAAClI,EAAA,EAAD,CAAQE,QA7DQ,WACjBuI,OAAOtD,IAAkBsD,OAAOlD,IACnCzG,EAAOqB,KAAK,kBAAmB,CAC7BgF,eACAI,iBACA2C,cAwDoCjI,QAAQ,WAA1C,2BAKF,cAACwD,EAAA,EAAD,wDCzGFiF,ECRgB,CACpBA,SAEMC,OAAOC,SAASC,UDKAH,SAGXJ,EAAe,QACfhI,EAAkB,eA6BhBwI,EA3BA,WAAO,IAAD,EACS9J,wBAAS6F,GADlB,mBACZ/F,EADY,KACJiK,EADI,KAQnB,OANAlD,qBAAU,WACR,IAAMmD,EAAYC,IAAeC,QAAQR,GACzCK,EAAUC,GACVA,EAAUlD,GAAG,2BAA2B,SAACC,SACxC,IAGD,eAAC,IAAD,WACE,cAAC,IAAD,CACEoD,OAAK,EACLC,KAhBqB,IAiBrBC,OAAQ,SAACtK,GAAD,OAAW,cAAC,EAAD,2BAAeA,GAAf,IAAsBD,OAAQA,QAEnD,cAAC,IAAD,CACEsK,KAAMd,EACNe,OAAQ,SAACtK,GAAD,OAAW,cAAC,EAAD,2BAAoBA,GAApB,IAA2BD,OAAQA,QAExD,cAAC,IAAD,CACEsK,KAAM9I,EACN+I,OAAQ,SAACtK,GAAD,OAAW,cAAC,EAAD,2BAA0BA,GAA1B,IAAiCD,OAAQA,Y,OEvBrDwK,MARf,WACE,OACE,cAAC,IAAD,CAAeC,SAAS,YAAxB,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eeaaea91.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { waitingPagePath } from \"../Routes\";\r\n\r\nconst FrontPage = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const handleConnectToRoom = () => {\r\n    if (roomName === \"\" || playerName === \"\") return;\r\n    socket.emit(\"roomConnection\", { roomName, playerName });\r\n    props.history.push(waitingPagePath);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h2>Map game</h2>\r\n        <p>Still in development</p>\r\n        <div style={{ margin: \"auto\", width: 400 }}>\r\n          <p>\r\n            Please write in 'Room Name' anything, then tell your friends to\r\n            write the same thing to play together. Or you can play by yourself.\r\n          </p>\r\n          <p>\r\n            This is in development so there are probably hella bugs. ToDo: add\r\n            leaderboard. Make finding new positions better. Using open street\r\n            maps and Mapillary.\r\n          </p>\r\n        </div>\r\n        <TextField\r\n          id=\"player-text-field\"\r\n          placeholder=\"Name\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n        />\r\n        <br />\r\n        <br />\r\n        <TextField\r\n          id=\"room-text-field\"\r\n          placeholder=\"Room Name\"\r\n          value={roomName}\r\n          onChange={(e) => setRoomName(e.target.value)}\r\n        />\r\n        <br />\r\n        <br />\r\n        <Button variant=\"outlined\" onClick={handleConnectToRoom}>\r\n          Connect\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import React, { useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMapEvents,\r\n  Polyline,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nconst MapComponent = ({\r\n  socket,\r\n  setImageUrls,\r\n  imageLoaded,\r\n  guessSentCallback,\r\n  isLeader,\r\n  distance,\r\n  roundPosition,\r\n  setGuessSent,\r\n  guessSent,\r\n  players,\r\n  playerName,\r\n}) => {\r\n  const position = [51.505, -0.09];\r\n  const [markerPos, setMarkerPos] = useState({ lat: 51.505, lng: -0.09 });\r\n\r\n  const defaultIcon = (correctIcon) =>\r\n    L.icon({\r\n      iconUrl: correctIcon\r\n        ? icon\r\n        : \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\",\r\n      shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const otherPlayersIcon = () =>\r\n    L.icon({\r\n      iconUrl:\r\n        \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png\",\r\n      // shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const CorrectMarker = () => {\r\n    if (!roundPosition) return null;\r\n    return <Marker icon={defaultIcon(true)} position={roundPosition} />;\r\n  };\r\n\r\n  const LineBetweenMarkers = () => {\r\n    if (!roundPosition) return null;\r\n    return (\r\n      <Polyline\r\n        positions={[\r\n          [roundPosition.lat, roundPosition.lng],\r\n          [markerPos.lat, markerPos.lng],\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const MyMarker = () => {\r\n    useMapEvents({\r\n      click(e) {\r\n        console.log(\"map clicked\", e.latlng);\r\n        setMarkerPos({ lat: e.latlng.lat, lng: e.latlng.lng });\r\n      },\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <Marker icon={defaultIcon(false)} position={markerPos} />\r\n        {guessSent && <CorrectMarker />}\r\n        {guessSent && <LineBetweenMarkers />}\r\n        {players.map((player) => {\r\n          if (player.markerPosition && player.name !== playerName) {\r\n            return (\r\n              <Marker\r\n                icon={otherPlayersIcon()}\r\n                position={player.markerPosition}\r\n                key={player.name}\r\n              >\r\n                <Popup>{player.name}</Popup>\r\n              </Marker>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleGuessSent = () => {\r\n    guessSentCallback();\r\n    setGuessSent(true);\r\n    socket.emit(\"handleSendGuess\", {\r\n      position: { lat: markerPos.lat, lng: markerPos.lng },\r\n    });\r\n  };\r\n\r\n  const startNextRound = () => {\r\n    socket.emit(\"handleStartNextRound\", {});\r\n    setImageUrls([]);\r\n    setGuessSent(false);\r\n  };\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <MapContainer\r\n        center={position}\r\n        zoom={2}\r\n        style={{\r\n          height: 400,\r\n          width: \"70%\",\r\n          margin: \"auto\",\r\n          marginBottom: 15,\r\n        }}\r\n      >\r\n        <MyMarker />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\"\r\n        />\r\n      </MapContainer>\r\n      {roundPosition && (\r\n        <React.Fragment>\r\n          {distance !== -1 ? (\r\n            <Typography style={{ textAlign: \"center\" }}>\r\n              You were {distance.toLocaleString()} KM from the correct position.\r\n            </Typography>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\" }}>\r\n              You did not guess this round.\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n      <br />\r\n      {imageLoaded && !roundPosition && (\r\n        <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n          <Button onClick={handleGuessSent} variant=\"contained\">\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {guessSent && !roundPosition && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>Waiting for other players to finish.</Typography>\r\n        </div>\r\n      )}\r\n      {guessSent && roundPosition && (\r\n        <React.Fragment>\r\n          {isLeader ? (\r\n            <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              <Button onClick={startNextRound} variant=\"contained\">\r\n                Start next round\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              <Typography>Waiting for leader to start next round</Typography>\r\n            </div>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Pannellum } from \"pannellum-react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport {\r\n  CircularProgress,\r\n  ListItemText,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport \"./ImageComponent.css\";\r\nimport MapComponent from \"./MapComponent\";\r\n\r\nconst sortPlayersByScore = (players) => {\r\n  return players.sort((a, b) => {\r\n    if (a.score < b.score) return 1;\r\n    if (a.score > b.score) return -1;\r\n    return 0;\r\n  });\r\n};\r\n\r\nconst ImageComponent = ({ socket }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  // 1024 640 or 2048\r\n  const getImageUrlFromKey = (key) => {\r\n    const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n    // setImgUrl(_imgUrl);\r\n    return _imgUrl;\r\n  };\r\n\r\n  const startCountDownTimer = useCallback(() => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownTimer2\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n    setCountdownStarted(true);\r\n  }, [countDownKey, timePerRound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"handleSendImages\", (data) => {\r\n      setGameOver(false);\r\n      const { gameData } = data;\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      const _timePerRound = data[\"timePerRound\"];\r\n      const _currentRound = data[\"currentRound\"];\r\n      const _numberOfRounds = data[\"numberOfRounds\"];\r\n      const _roomName = data[\"roomName\"];\r\n      setRoomName(_roomName);\r\n      setCurrentRound(_currentRound);\r\n      setNumberOfRounds(_numberOfRounds);\r\n      setTimePerRound(_timePerRound);\r\n      setTimerSeconds(_timePerRound);\r\n      setPlayers(_players);\r\n      const myImageUrls = [];\r\n      if (gameData[\"features\"].length > 0) {\r\n        for (let i = 0; i < gameData[\"features\"].length; i++) {\r\n          const item = gameData[\"features\"][i];\r\n          const currKey = item[\"properties\"][\"key\"];\r\n          const url = getImageUrlFromKey(currKey);\r\n          myImageUrls.push(url);\r\n        }\r\n        setCurrentIndex(0);\r\n        setImageUrls(myImageUrls);\r\n        setImgUrl(myImageUrls[0]);\r\n        setImageLoaded(true);\r\n        setRoundPosition(undefined);\r\n        setDistance(-1);\r\n        setGuessSent(false);\r\n        startCountDownTimer();\r\n      }\r\n    });\r\n\r\n    socket.on(\"handleRoundOver\", (data) => {\r\n      const { isGameLeader, correctPosition } = data;\r\n\r\n      const _distance = data[\"distance\"];\r\n      const _players = data[\"players\"];\r\n      const _playerName = data[\"playerName\"];\r\n      setPlayerName(_playerName);\r\n      setPlayers(_players);\r\n      setRoundPosition(correctPosition);\r\n      setDistance(_distance);\r\n      setGuessSent(true);\r\n      setIsLeader(isGameLeader);\r\n      setImageUrls([]);\r\n      setCountdownStarted(false);\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n  }, [socket, startCountDownTimer]);\r\n\r\n  const changeImage = (newIndex) => {\r\n    setImgUrl(imageUrls[newIndex]);\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const handlePlayAgain = () => {\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <Button variant=\"outlined\" onClick={handlePlayAgain}>\r\n              Play again\r\n            </Button>\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div id=\"countdown-clock-container\" style={{ padding: 15 }}>\r\n            <CountdownCircleTimer\r\n              key={countDownKey}\r\n              isPlaying={countdownStarted}\r\n              style={{ margin: \"auto\" }}\r\n              size={70}\r\n              duration={timerSeconds}\r\n              colors={[\r\n                [\"#004777\", 0.33],\r\n                [\"#F7B801\", 0.33],\r\n                [\"#A30000\", 0.33],\r\n              ]}\r\n            >\r\n              {({ remainingTime }) => remainingTime}\r\n            </CountdownCircleTimer>\r\n            <Typography>\r\n              Round {currentRound} of {numberOfRounds}\r\n            </Typography>\r\n          </div>\r\n          {imageUrls.length > 0 ? (\r\n            <div className=\"pano-container\">\r\n              <Typography style={{ textAlign: \"center\" }}>\r\n                {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n              </Typography>\r\n              <button\r\n                className=\"pano-btn\"\r\n                id=\"pano-prev-btn\"\r\n                onClick={decIndex}\r\n              >\r\n                <i className=\"arrow arrow-left\"></i>\r\n              </button>\r\n              <button\r\n                className=\"pano-btn arrow-right\"\r\n                id=\"pano-next-btn\"\r\n                onClick={incIndex}\r\n              >\r\n                <i className=\"arrow\"></i>\r\n              </button>\r\n\r\n              <Pannellum\r\n                width=\"100%\"\r\n                height=\"500px\"\r\n                image={imgUrl}\r\n                pitch={10}\r\n                yaw={180}\r\n                hfov={110}\r\n                autoLoad\r\n              />\r\n            </div>\r\n          ) : !guessSent ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\" }}>\r\n              Waiting for leader to start round.\r\n            </Typography>\r\n          )}\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n            players={players}\r\n            playerName={playerName}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>Players in room {roomName}</Typography>\r\n          <List style={{ width: 200, margin: \"auto\" }}>\r\n            <ListItem>\r\n              <ListItemText>Score</ListItemText>\r\n              <ListItemText>Name</ListItemText>\r\n              <ListItemText></ListItemText>\r\n            </ListItem>\r\n            {players.map((player, i) => {\r\n              return (\r\n                <React.Fragment key={`${player.name}-${i}`}>\r\n                  <ListItem>\r\n                    <ListItemText>{player.score}</ListItemText>\r\n                    <ListItemText>{player.name}</ListItemText>\r\n                    {player.isLeader ? (\r\n                      <ListItemIcon>\r\n                        <ChildCare />\r\n                      </ListItemIcon>\r\n                    ) : (\r\n                      <ListItemText />\r\n                    )}\r\n                  </ListItem>\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </List>\r\n        </div>\r\n      )}\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [onlyPano, setOnlyPano] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", {\r\n        timePerRound,\r\n        numberOfRounds,\r\n        onlyPano,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h3>Waiting room</h3>\r\n      <h5>Room {roomName}</h5>\r\n      <Typography>Players in room</Typography>\r\n      <List style={{ width: 200, margin: \"auto\" }}>\r\n        {players.map((player, i) => {\r\n          return (\r\n            <React.Fragment key={`${player.name}-${i}`}>\r\n              <ListItem>\r\n                <ListItemText>{player.name}</ListItemText>\r\n                {player.isLeader ? (\r\n                  <ListItemIcon>\r\n                    <ChildCare />\r\n                  </ListItemIcon>\r\n                ) : (\r\n                  <ListItemText />\r\n                )}\r\n              </ListItem>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n      {isLeader ? (\r\n        <React.Fragment>\r\n          <br />\r\n          <br />\r\n          <Typography>Number of Rounds</Typography>\r\n          <TextField\r\n            id=\"numberofrounds-text-field\"\r\n            type=\"number\"\r\n            placeholder=\"Number of rounds\"\r\n            value={numberOfRounds}\r\n            onChange={(e) => setNumberOfRounds(e.target.value)}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Typography>Seconds per round</Typography>\r\n          <TextField\r\n            id=\"timeperround-text-field\"\r\n            type=\"number\"\r\n            placeholder=\"seconds per round\"\r\n            value={timePerRound}\r\n            onChange={(e) => setTimePerRound(e.target.value)}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Typography>Use only panoramas?</Typography>\r\n          <Checkbox value={onlyPano} onChange={() => setOnlyPano(!onlyPano)} />\r\n          <br />\r\n          <br />\r\n\r\n          <Button onClick={handleStartGame} variant=\"outlined\">\r\n            Start Game\r\n          </Button>\r\n        </React.Fragment>\r\n      ) : (\r\n        <Typography>Waiting for leader to start the game.</Typography>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ImageComponent from \"./components/ImageCompontent\";\r\nimport WaitingRoomComponent from \"./components/WaitingRoomComponent\";\r\nimport { config } from \"./config\";\r\n\r\nconst ENDPOINT = config.ENDPOINT;\r\n\r\nexport const frontPagePath = \"/\";\r\nexport const gamePagePath = \"/game\";\r\nexport const waitingPagePath = \"/waitingroom\";\r\n\r\nconst Routes = () => {\r\n  const [socket, setSocket] = useState(undefined);\r\n  useEffect(() => {\r\n    const newSocket = socketIOClient.connect(ENDPOINT);\r\n    setSocket(newSocket);\r\n    newSocket.on(\"connectedToRoomCallBack\", (data) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={frontPagePath}\r\n        render={(props) => <FrontPage {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={gamePagePath}\r\n        render={(props) => <ImageComponent {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={waitingPagePath}\r\n        render={(props) => <WaitingRoomComponent {...props} socket={socket} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const config = {\r\n  ENDPOINT:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? window.location.hostname\r\n      : \"http://localhost:8000\",\r\n};\r\n","import { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/map-game\">\n      <Routes />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}