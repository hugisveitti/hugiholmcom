{"version":3,"sources":["components/AppContainer.jsx","components/icon.png","components/DonateButton.jsx","components/FrontPage.jsx","utility/socketFunctions.js","components/MapComponent.jsx","components/PanoramaComponent.jsx","components/LeaderBoardComponent.jsx","components/GameContainer.jsx","components/WaitingRoomComponent.jsx","Routes.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["colors","useStyles","makeStyles","createStyles","root","flexGrow","minHeight","position","backgroundColor","menuButton","marginRight","title","header","footer","fontSize","margin","color","bottom","width","height","padding","marginTop","footerContent","container","paddingTop","paddingBottom","buttonGreen","background","cardContainer","textAlign","marginBottom","icon","AppContainer","children","classes","className","AppBar","Toolbar","action","method","target","type","name","value","src","border","alt","FrontPage","socket","props","useState","roomName","setRoomName","playerName","setPlayerName","snackOpen","setSnackOpen","snackMessage","setSnackMessage","snackStatus","setSnackStatus","useEffect","Snackbar","open","autoHideDuration","onClose","Alert","elevation","variant","severity","style","Card","CardContent","href","DonateButton","TextField","id","placeholder","onChange","e","Button","onClick","emit","on","data","history","push","waitingPagePath","sortPlayersByScore","players","sort","a","b","score","getImageUrlFromKey","item","playerConnectedCheck","frontPagePath","MapComponent","setImageUrls","imageLoaded","guessSentCallback","isLeader","distance","roundPosition","setGuessSent","guessSent","roundOver","setRoundOver","lat","lng","setPosition","markerPos","setMarkerPos","defaultIcon","correctIcon","L","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","CorrectMarker","Marker","LineBetweenMarkers","Polyline","positions","around","num","Math","round","SetNormalizedPosition","normposition","myMap","useMap","currCenter","getCenter","newLng","getCorrectLng","setView","MyMarker","useMapEvents","click","latMax","max","latlng","latMin","min","lngMax","lngMin","console","log","mouseup","map","player","markerPosition","Popup","changeValue","abs","startNextRound","StartNextRoundButton","Typography","correctLng","greenButton","Fragment","toLocaleString","MapContainer","center","zoom","bounds","latLngBounds","latLng","TileLayer","attribution","url","PanoramaComponent","imageUrls","currentIndex","setCurrentIndex","imageData","undefined","viewer","setViewer","spehereRef","React","createRef","changeImage","newIndex","setPanorama","then","length","viewer2","Viewer","current","panorama","navbar","loadingTxt","displayPano","display","ref","CircularProgress","LeaderBoardComponent","Paper","List","dense","ListItem","ListItemText","inset","i","listBackgroundColor","ListItemIcon","ChildCare","primary","GameContainer","imgUrl","setImgUrl","setImageLoaded","countdownStarted","setCountdownStarted","setPlayers","setIsLeader","setDistance","setRoundPosition","timerSeconds","setTimerSeconds","countDownKey","setCountDownKey","timePerRound","setTimePerRound","currentRound","setCurrentRound","numberOfRounds","setNumberOfRounds","gameOver","setGameOver","playingAgainPressed","setPlayAgainPressed","setImageData","startCountDownTimer","useCallback","gameData","_players","_timePerRound","_currentRound","_numberOfRounds","_roomName","myImageUrls","watchSendImages","isGameLeader","correctPosition","_distance","_playerName","watchRoundOver","handlePlayAgain","RenderPlayAgainBtn","top","left","isPlaying","size","duration","remainingTime","WaitingRoomComponent","onlyPano","setOnlyPano","onlyEuropeUsa","once","_isLeader","gamePagePath","FormControlLabel","control","Checkbox","checked","label","isNaN","ENDPOINT","window","location","hostname","Routes","setSocket","newSocket","socketIOClient","connect","exact","path","render","App","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.820a5ca1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, AppBar, Toolbar } from \"@material-ui/core\";\r\n\r\nexport const colors = [\r\n  \"#52BE80\",\r\n  \"#DAF7A6\",\r\n  \"#FFC300\",\r\n  \"#FF5733\",\r\n  \"#2C3E50\",\r\n  \"#5D6D7E\",\r\n];\r\nexport const backgroundCardColor = \"#F9EBEA\";\r\n\r\nexport const useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      minHeight: \"100vh\",\r\n      position: \"relative\",\r\n      backgroundColor: \"#D1F2EB\",\r\n    },\r\n    menuButton: {\r\n      marginRight: 20,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    header: {\r\n      backgroundColor: colors[0],\r\n    },\r\n    footer: {\r\n      backgroundColor: colors[0],\r\n      fontSize: 10,\r\n      margin: \"auto\",\r\n      color: \"white\",\r\n      position: \"absolute\",\r\n      bottom: 0,\r\n      width: \"100%\",\r\n      height: \"2.5rem\",\r\n      padding: 0,\r\n      marginTop: 20,\r\n    },\r\n    footerContent: {\r\n      margin: \"auto\",\r\n    },\r\n    container: {\r\n      paddingTop: 20,\r\n      paddingBottom: 100,\r\n    },\r\n    buttonGreen: {\r\n      background: colors[0],\r\n      color: \"white\",\r\n    },\r\n    cardContainer: {\r\n      margin: \"auto\",\r\n      width: 400,\r\n      backgroundColor: backgroundCardColor,\r\n      textAlign: \"center\",\r\n      padding: 20,\r\n      marginBottom: 20,\r\n      marginTop: 20,\r\n    },\r\n    icon: {\r\n      width: \"auto\",\r\n      height: 60,\r\n    },\r\n  })\r\n);\r\nconst AppContainer = ({ children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.header}>\r\n          <h3>JeoJuessr</h3>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.container}>{children}</div>\r\n      <Toolbar className={classes.footer}>\r\n        <div className={classes.footerContent}>footer stuff</div>\r\n      </Toolbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n","export default __webpack_public_path__ + \"static/media/icon.f293e650.png\";","import React from \"react\";\r\n\r\n// https://www.paypal.com/donate?hosted_button_id=Z7JL86S4UW456\r\nexport default () => {\r\n  return (\r\n    <form action=\"https://www.paypal.com/donate\" method=\"post\" target=\"_top\">\r\n      <input type=\"hidden\" name=\"hosted_button_id\" value=\"Z7JL86S4UW456\" />\r\n      <input\r\n        type=\"image\"\r\n        src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif\"\r\n        border=\"0\"\r\n        name=\"submit\"\r\n        title=\"PayPal - The safer, easier way to pay online!\"\r\n        alt=\"Donate with PayPal button\"\r\n      />\r\n      <img\r\n        alt=\"\"\r\n        border=\"0\"\r\n        src=\"https://www.paypal.com/en_IS/i/scr/pixel.gif\"\r\n        width=\"1\"\r\n        height=\"1\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { waitingPagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\nimport DonateButton from \"./DonateButton\";\r\n\r\nconst FrontPage = ({ socket, ...props }) => {\r\n  const classes = useStyles();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [snackOpen, setSnackOpen] = useState(false);\r\n  const [snackMessage, setSnackMessage] = useState(\"\");\r\n  const [snackStatus, setSnackStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n  }, [socket]);\r\n\r\n  const handleConnectToRoom = () => {\r\n    if (roomName === \"\" || playerName === \"\") {\r\n      setSnackOpen(true);\r\n      setSnackStatus(\"error\");\r\n      setSnackMessage(\"Please fill in your name and room name\");\r\n      return;\r\n    }\r\n    socket.emit(\"roomConnection\", { roomName, playerName });\r\n    socket.on(\"roomConnectionCallback\", (data) => {\r\n      setSnackMessage(data[\"message\"]);\r\n      setSnackStatus(data[\"status\"]);\r\n      setSnackOpen(true);\r\n      if (data[\"status\"] === \"success\") {\r\n        props.history.push(waitingPagePath);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Snackbar\r\n        open={snackOpen}\r\n        autoHideDuration={5000}\r\n        onClose={() => setSnackOpen(false)}\r\n      >\r\n        <Alert\r\n          elevation={6}\r\n          variant=\"filled\"\r\n          severity={snackStatus}\r\n          onClose={() => setSnackOpen(false)}\r\n        >\r\n          {snackMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <img className={classes.icon} src={icon} alt=\"joejuessrlogo\" />\r\n        <Card className={classes.cardContainer}>\r\n          <CardContent>\r\n            <p>Still in development</p>\r\n            <p>\r\n              <i>\r\n                The Mapillary API changed recently so the game stopped working,\r\n                but I think I fixed it now. Also check out my new game{\" \"}\r\n                <a href=\"https://www.collisio.club/\">Collisio</a>.\r\n              </i>\r\n            </p>\r\n            <p>\r\n              Please write in 'Room Name' anything, then tell your friends to\r\n              write the same thing to play together. Or you can play by\r\n              yourself.\r\n            </p>\r\n            <p>\r\n              This is in development so there are probably hella bugs. ToDo: add\r\n              leaderboard. Make finding new positions better. Using open street\r\n              maps and Mapillary.\r\n            </p>\r\n            <p>\r\n              It is possible to reconnect to a game by writing the exact same\r\n              name.\r\n            </p>\r\n\r\n            <h3>\r\n              I have noticed that people still play this game even though I have\r\n              not advertised it. That is why I have set up a link to accept\r\n              donations, with that I will continue to develop the game, put it\r\n              on a better server (it will be faster) and even take some\r\n              requests.\r\n            </h3>\r\n            <DonateButton />\r\n            <br />\r\n\r\n            <TextField\r\n              id=\"player-text-field\"\r\n              placeholder=\"Name\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"room-text-field\"\r\n              placeholder=\"Room Name\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Button\r\n              className={classes.buttonGreen}\r\n              variant=\"contained\"\r\n              onClick={handleConnectToRoom}\r\n            >\r\n              Connect\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import { frontPagePath } from \"../Routes\";\r\n\r\nexport const sortPlayersByScore = (players) => {\r\n  return players.sort((a, b) => {\r\n    if (a.score < b.score) return 1;\r\n    if (a.score > b.score) return -1;\r\n    return 0;\r\n  });\r\n};\r\n\r\n// 1024 640 or 2048\r\nconst getImageUrlFromKey = (item) => {\r\n  return item[\"thumb_2048_url\"]\r\n  // const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n  // return _imgUrl;\r\n};\r\n\r\nexport const watchSendImages = ({\r\n  socket,\r\n  setGameOver,\r\n  setRoomName,\r\n  setCurrentRound,\r\n  setNumberOfRounds,\r\n  setTimePerRound,\r\n  setTimerSeconds,\r\n  setPlayers,\r\n  setCurrentIndex,\r\n  setImageUrls,\r\n  setImgUrl,\r\n  setImageLoaded,\r\n  setDistance,\r\n  setGuessSent,\r\n  startCountDownTimer,\r\n  setRoundOver,\r\n  setRoundPosition,\r\n  setImageData,\r\n}) => {\r\n  socket.on(\"handleSendImages\", (data) => {\r\n    setGameOver(false);\r\n    const { gameData } = data;\r\n    let _players = data[\"players\"];\r\n    _players = sortPlayersByScore(_players);\r\n    const _timePerRound = data[\"timePerRound\"];\r\n    const _currentRound = data[\"currentRound\"];\r\n    const _numberOfRounds = data[\"numberOfRounds\"];\r\n    const _roomName = data[\"roomName\"];\r\n    setRoomName(_roomName);\r\n    setCurrentRound(_currentRound);\r\n    setNumberOfRounds(_numberOfRounds);\r\n    setTimePerRound(_timePerRound);\r\n    setTimerSeconds(_timePerRound);\r\n    setPlayers(_players);\r\n    const myImageUrls = [];\r\n    setImageData(gameData);\r\n    if (gameData.length > 0) {\r\n      for (let i = 0; i < gameData.length; i++) {\r\n        const item = gameData[i];\r\n        //  const currKey = item[\"properties\"][\"key\"];\r\n        const url = getImageUrlFromKey(item);\r\n        myImageUrls.push(url);\r\n      }\r\n      setCurrentIndex(0);\r\n      setImageUrls(myImageUrls);\r\n      setImgUrl(myImageUrls[0]);\r\n      setImageLoaded(true);\r\n      setRoundPosition(undefined);\r\n      setDistance(-1);\r\n      setGuessSent(false);\r\n      startCountDownTimer();\r\n      setRoundOver(false);\r\n    }\r\n  });\r\n};\r\n\r\nexport const watchRoundOver = ({\r\n  socket,\r\n  setPlayerName,\r\n  setPlayers,\r\n  setRoundPosition,\r\n  setDistance,\r\n  setIsLeader,\r\n  setCountdownStarted,\r\n  setRoundOver,\r\n}) => {\r\n  socket.on(\"handleRoundOver\", (data) => {\r\n    const { isGameLeader, correctPosition } = data;\r\n\r\n    const _distance = data[\"distance\"];\r\n    const _players = data[\"players\"];\r\n    const _playerName = data[\"playerName\"];\r\n    setPlayerName(_playerName);\r\n    setPlayers(_players);\r\n    setRoundPosition(correctPosition);\r\n    setDistance(_distance);\r\n\r\n    setIsLeader(isGameLeader);\r\n    setCountdownStarted(false);\r\n    setRoundOver(true);\r\n  });\r\n};\r\n\r\nexport const playerConnectedCheck = (socket, props) => {\r\n  socket.emit(\"connectedToAnyRoom\");\r\n  socket.on(\"connectedToAnyRoomCallback\", (data) => {\r\n    if (data[\"playerNotConnectedToGame\"]) {\r\n      props.history.push(frontPagePath);\r\n    }\r\n  });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMapEvents,\r\n  useMap,\r\n  Polyline,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst MapComponent = ({\r\n  socket,\r\n  setImageUrls,\r\n  imageLoaded,\r\n  guessSentCallback,\r\n  isLeader,\r\n  distance,\r\n  roundPosition,\r\n  setGuessSent,\r\n  guessSent,\r\n  players,\r\n  playerName,\r\n  roundOver,\r\n  setRoundOver,\r\n}) => {\r\n  const [position, setPosition] = useState({ lat: 51.505, lng: -0.09 });\r\n  const [markerPos, setMarkerPos] = useState({ lat: 51.505, lng: -0.09 });\r\n  const classes = useStyles();\r\n  const defaultIcon = (correctIcon) =>\r\n    L.icon({\r\n      iconUrl: correctIcon\r\n        ? icon\r\n        : \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\",\r\n      shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const otherPlayersIcon = () =>\r\n    L.icon({\r\n      iconUrl:\r\n        \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png\",\r\n      // shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const CorrectMarker = () => {\r\n    if (!roundPosition) return null;\r\n    return <Marker icon={defaultIcon(true)} position={roundPosition} />;\r\n  };\r\n\r\n  const LineBetweenMarkers = () => {\r\n    if (!roundPosition) return null;\r\n    return (\r\n      <Polyline\r\n        positions={[\r\n          [roundPosition.lat, roundPosition.lng],\r\n          [markerPos.lat, markerPos.lng],\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const around = (num) => {\r\n    return Math.round(num * 100) / 100;\r\n  };\r\n\r\n  const SetNormalizedPosition = ({ normposition }) => {\r\n    const myMap = useMap();\r\n    const currCenter = myMap.getCenter();\r\n    if (currCenter.lng < -180 || currCenter.lng > 180) {\r\n      const newLng = getCorrectLng(currCenter.lng);\r\n      myMap.setView({ lat: currCenter.lat, lng: newLng });\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const MyMarker = () => {\r\n    useMapEvents({\r\n      click(e) {\r\n        let latMax = around(Math.max(e.latlng.lat, markerPos.lat));\r\n        let latMin = around(Math.min(e.latlng.lat, markerPos.lat));\r\n        let lngMax = around(Math.max(e.latlng.lng, markerPos.lng));\r\n        let lngMin = around(Math.min(e.latlng.lng, markerPos.lng));\r\n        console.log(`{ max: ${latMax}, min: ${latMin}, lngIntervals:[\r\n         { min: ${lngMin} , max:${lngMax} }\r\n        ] },`);\r\n        if (!roundOver) {\r\n          setMarkerPos({ lat: e.latlng.lat, lng: e.latlng.lng });\r\n        }\r\n      },\r\n      mouseup(e) {\r\n        setPosition(e.latlng);\r\n      },\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <Marker icon={defaultIcon(false)} position={markerPos} />\r\n        {roundOver && <CorrectMarker />}\r\n        {roundOver && <LineBetweenMarkers />}\r\n        {players.map((player) => {\r\n          if (player.markerPosition && player.name !== playerName) {\r\n            return (\r\n              <Marker\r\n                icon={otherPlayersIcon()}\r\n                position={player.markerPosition}\r\n                key={player.name}\r\n              >\r\n                <Popup>{player.name}</Popup>\r\n              </Marker>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCorrectLng = (lng) => {\r\n    let changeValue = 0;\r\n    if (lng < 180) {\r\n      changeValue = 360;\r\n    } else if (lng > 180) {\r\n      changeValue = -360;\r\n    }\r\n    while (Math.abs(lng) > 180) {\r\n      lng += changeValue;\r\n    }\r\n    return lng;\r\n  };\r\n\r\n  const handleGuessSent = () => {\r\n    guessSentCallback();\r\n    setGuessSent(true);\r\n    const correctLng = getCorrectLng(+markerPos.lng);\r\n    socket.emit(\"handleSendGuess\", {\r\n      position: { lat: markerPos.lat, lng: correctLng },\r\n    });\r\n  };\r\n\r\n  const startNextRound = () => {\r\n    socket.emit(\"handleStartNextRound\", {});\r\n    setImageUrls([]);\r\n    setGuessSent(false);\r\n    setRoundOver(false);\r\n  };\r\n\r\n  const StartNextRoundButton = () => {\r\n    if ((guessSent && roundPosition) || roundOver) {\r\n      if (isLeader) {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Button\r\n              onClick={startNextRound}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start next round\r\n            </Button>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Typography>Waiting for leader to start next round</Typography>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      {imageLoaded && !roundPosition && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>You have to send your guess</Typography>\r\n          <br />\r\n          <Button\r\n            onClick={handleGuessSent}\r\n            variant=\"contained\"\r\n            className={classes.greenButton}\r\n          >\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {roundPosition && (\r\n        <React.Fragment>\r\n          {distance !== -1 ? (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You were {distance.toLocaleString()} KM from the correct position.\r\n            </Typography>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              You did not guess this round.\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {guessSent && !roundPosition && (\r\n        <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n          <Typography>Waiting for other players to finish.</Typography>\r\n        </div>\r\n      )}\r\n      <StartNextRoundButton />\r\n      <br />\r\n\r\n      <MapContainer\r\n        center={position}\r\n        zoom={2}\r\n        style={{\r\n          height: 400,\r\n          width: \"70%\",\r\n          margin: \"auto\",\r\n          marginBottom: 15,\r\n        }}\r\n        bounds={L.latLngBounds(L.latLng(90, 180), L.latLng(-90, -180))}\r\n      >\r\n        <SetNormalizedPosition normposition={position} />\r\n        <MyMarker />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\"\r\n        />\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport \"./GameContainer.css\";\r\nimport { Viewer } from \"photo-sphere-viewer\";\r\nimport \"photo-sphere-viewer/dist/photo-sphere-viewer.css\";\r\n\r\nconst PanoramaComponent = ({\r\n  imageUrls,\r\n\r\n  currentIndex,\r\n  setCurrentIndex,\r\n\r\n  guessSent,\r\n  imageData,\r\n}) => {\r\n  const [viewer, setViewer] = useState(undefined);\r\n  const spehereRef = React.createRef();\r\n\r\n  const changeImage = (newIndex) => {\r\n    // delete webGL so its doesn't load stuff we dont want\r\n\r\n    if (viewer) {\r\n      viewer.setPanorama(imageUrls[newIndex]).then(\r\n        () => {},\r\n        (e) => {\r\n          console.log(\"error\", e);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imageUrls.length > 0) {\r\n      if (!viewer) {\r\n        const viewer2 = new Viewer({\r\n          container: spehereRef.current,\r\n          panorama: imageUrls[0],\r\n          navbar: false,\r\n          loadingTxt: \"\",\r\n        });\r\n        setViewer(viewer2);\r\n      } else {\r\n        changeImage(0);\r\n      }\r\n    }\r\n  }, [imageUrls?.length]);\r\n\r\n  const displayPano = imageUrls.length > 0 ? \"block\" : \"none\";\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"pano-container\" style={{ display: displayPano }}>\r\n        <Typography style={{ textAlign: \"center\" }}>\r\n          {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n        </Typography>\r\n        <button className=\"pano-btn\" id=\"pano-prev-btn\" onClick={decIndex}>\r\n          <i className=\"arrow arrow-left\"></i>\r\n        </button>\r\n        <button\r\n          className=\"pano-btn arrow-right\"\r\n          id=\"pano-next-btn\"\r\n          onClick={incIndex}\r\n        >\r\n          <i className=\"arrow\"></i>\r\n        </button>\r\n        <div\r\n          style={{ height: 400, width: \"100%\" }}\r\n          id=\"viewer\"\r\n          ref={spehereRef}\r\n        ></div>\r\n      </div>\r\n      <div style={{ display: imageUrls.length > 0 ? \"none\" : \"block\" }}>\r\n        {!guessSent ? (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <CircularProgress />\r\n            <div>Loading image...</div>\r\n          </div>\r\n        ) : (\r\n          <Typography style={{ textAlign: \"center\" }}>\r\n            Waiting for leader to start round.\r\n          </Typography>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PanoramaComponent;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  ListItem,\r\n  List,\r\n  ListItemText,\r\n  ListItemIcon,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { useStyles } from \"./AppContainer\";\r\n\r\nconst LeaderBoardComponent = ({ players, roomName }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.cardContainer}>\r\n      <Typography variant=\"h6\">Players in room {roomName}</Typography>\r\n      <List dense={false} style={{ width: 400, margin: \"auto\" }}>\r\n        <ListItem>\r\n          <ListItemText inset>Name</ListItemText>\r\n          <ListItemText>Score</ListItemText>\r\n        </ListItem>\r\n        {players.map((player, i) => {\r\n          const listBackgroundColor = i % 2 === 0 ? \"#ffeeee\" : \"inherit\";\r\n          return (\r\n            <React.Fragment key={`${player.name}-${i}`}>\r\n              <ListItem style={{ backgroundColor: listBackgroundColor }}>\r\n                {player.isLeader && (\r\n                  <ListItemIcon>\r\n                    <ChildCare />\r\n                  </ListItemIcon>\r\n                )}\r\n                <ListItemText inset={!player.isLeader} primary={player.name} />\r\n                <ListItemText primary={(+player.score).toLocaleString()} />\r\n              </ListItem>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default LeaderBoardComponent;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { CircularProgress, Typography, Button } from \"@material-ui/core\";\r\nimport {\r\n  watchSendImages,\r\n  watchRoundOver,\r\n  sortPlayersByScore,\r\n} from \"../utility/socketFunctions\";\r\n\r\nimport \"./GameContainer.css\";\r\nimport MapComponent from \"./MapComponent\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\nimport PanoramaComponent from \"./PanoramaComponent\";\r\nimport LeaderBoardComponent from \"./LeaderBoardComponent\";\r\nimport { playerConnectedCheck } from \"../utility/socketFunctions\";\r\n\r\nconst GameContainer = ({ socket, ...props }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [roundOver, setRoundOver] = useState(false);\r\n  const [playingAgainPressed, setPlayAgainPressed] = useState(false);\r\n  const [imageData, setImageData] = useState([]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  const startCountDownTimer = useCallback(() => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownTimer2\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n    setCountdownStarted(true);\r\n  }, [countDownKey, timePerRound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    playerConnectedCheck(socket, props);\r\n\r\n    watchSendImages({\r\n      socket,\r\n      setGameOver,\r\n      setRoomName,\r\n      setCurrentRound,\r\n      setNumberOfRounds,\r\n      setTimePerRound,\r\n      setTimerSeconds,\r\n      setPlayers,\r\n      setCurrentIndex,\r\n      setImageUrls,\r\n      setImgUrl,\r\n      setImageLoaded,\r\n      setDistance,\r\n      setGuessSent,\r\n      startCountDownTimer,\r\n      setRoundOver,\r\n      setRoundPosition,\r\n      setImageData,\r\n    });\r\n\r\n    watchRoundOver({\r\n      socket,\r\n      setPlayerName,\r\n      setPlayers,\r\n      setRoundPosition,\r\n      setDistance,\r\n      setIsLeader,\r\n      setCountdownStarted,\r\n      setRoundOver,\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      setGameOver(false);\r\n      setDistance(-1);\r\n      setPlayAgainPressed(false);\r\n      setRoundOver(false);\r\n      setRoundPosition(undefined);\r\n    });\r\n  }, [socket, startCountDownTimer]);\r\n\r\n  const handlePlayAgain = () => {\r\n    setPlayAgainPressed(true);\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  const RenderPlayAgainBtn = () => {\r\n    if (playingAgainPressed) {\r\n      return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handlePlayAgain}\r\n        className={classes.buttonGreen}\r\n      >\r\n        Play again\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <RenderPlayAgainBtn />\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div\r\n            id=\"info-container\"\r\n            style={{ padding: 15, textAlign: \"center\", position: \"relevant\" }}\r\n          >\r\n            <div\r\n              id=\"count-down-container\"\r\n              style={{\r\n                margin: \"auto\",\r\n                position: \"absolute\",\r\n                top: 90,\r\n                left: 10,\r\n              }}\r\n            >\r\n              <CountdownCircleTimer\r\n                key={countDownKey}\r\n                isPlaying={countdownStarted}\r\n                size={70}\r\n                duration={timerSeconds}\r\n                colors={[\r\n                  [\"#004777\", 0.33],\r\n                  [\"#F7B801\", 0.33],\r\n                  [\"#A30000\", 0.33],\r\n                ]}\r\n              >\r\n                {({ remainingTime }) => remainingTime}\r\n              </CountdownCircleTimer>\r\n            </div>\r\n            <img className={classes.icon} src={icon} alt=\"jjicon\" />\r\n            <Typography>\r\n              Round {currentRound} of {numberOfRounds}\r\n            </Typography>\r\n          </div>\r\n          <PanoramaComponent\r\n            imgUrl={imgUrl}\r\n            imageUrls={imageUrls}\r\n            currentIndex={currentIndex}\r\n            setCurrentIndex={setCurrentIndex}\r\n            setImgUrl={setImgUrl}\r\n            guessSent={guessSent}\r\n            imageData={imageData}\r\n          />\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n            players={players}\r\n            playerName={playerName}\r\n            roundOver={roundOver}\r\n            setRoundOver={setRoundOver}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <LeaderBoardComponent players={players} roomName={roomName} />\r\n      )}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default GameContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport { playerConnectedCheck } from \"../utility/socketFunctions\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [onlyPano, setOnlyPano] = useState(true);\r\n  const [onlyEuropeUsa, setOnlyEuropeUsa] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      playerConnectedCheck(socket, props);\r\n\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", {\r\n        timePerRound,\r\n        numberOfRounds,\r\n        onlyPano,\r\n        onlyEuropeUsa,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Paper elevation={1} className={classes.cardContainer}>\r\n        <h3>Waiting room</h3>\r\n        <h5>Room {roomName}</h5>\r\n        <Typography>\r\n          To play with your friends, tell them to write '{roomName}' in the room\r\n          inputbox and press connect!\r\n        </Typography>\r\n        <Typography>Players in room</Typography>\r\n        <List style={{ width: 200, margin: \"auto\" }}>\r\n          {players.map((player, i) => {\r\n            return (\r\n              <React.Fragment key={`${player.name}-${i}`}>\r\n                <ListItem>\r\n                  <ListItemText>{player.name}</ListItemText>\r\n                  {player.isLeader ? (\r\n                    <ListItemIcon>\r\n                      <ChildCare />\r\n                    </ListItemIcon>\r\n                  ) : (\r\n                    <ListItemText />\r\n                  )}\r\n                </ListItem>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </List>\r\n        {isLeader ? (\r\n          <React.Fragment>\r\n            <br />\r\n            <br />\r\n            <Typography>Number of Rounds</Typography>\r\n            <TextField\r\n              id=\"numberofrounds-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"Number of rounds\"\r\n              value={numberOfRounds}\r\n              onChange={(e) => setNumberOfRounds(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Typography>Seconds per round</Typography>\r\n            <TextField\r\n              id=\"timeperround-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"seconds per round\"\r\n              value={timePerRound}\r\n              onChange={(e) => setTimePerRound(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={onlyPano}\r\n                  onChange={() => {\r\n                    setOnlyPano(!onlyPano);\r\n                  }}\r\n                />\r\n              }\r\n              label=\"Use only panoramas?\"\r\n            />\r\n            {/**\r\n          * \r\n             <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  value={onlyEuropeUsa}\r\n                  onChange={() => setOnlyEuropeUsa(!onlyEuropeUsa)}\r\n                />\r\n              }\r\n              label=\"Use only 40+ latitude?\"\r\n            />\r\n              */}\r\n            <br />\r\n            <br />\r\n            <Button\r\n              onClick={handleStartGame}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start Game\r\n            </Button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <Typography>Waiting for leader to start the game.</Typography>\r\n        )}\r\n      </Paper>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport GameContainer from \"./components/GameContainer\";\r\nimport WaitingRoomComponent from \"./components/WaitingRoomComponent\";\r\nimport { config } from \"./config\";\r\n\r\nconst ENDPOINT = config.ENDPOINT;\r\n\r\nexport const frontPagePath = \"/\";\r\nexport const gamePagePath = \"/game\";\r\nexport const waitingPagePath = \"/waitingroom\";\r\n\r\nconst Routes = () => {\r\n  const [socket, setSocket] = useState(undefined);\r\n  useEffect(() => {\r\n    const newSocket = socketIOClient.connect(ENDPOINT);\r\n    setSocket(newSocket);\r\n    newSocket.on(\"connectedToRoomCallBack\", (data) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={frontPagePath}\r\n        render={(props) => <FrontPage {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={gamePagePath}\r\n        render={(props) => <GameContainer {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        path={waitingPagePath}\r\n        render={(props) => <WaitingRoomComponent {...props} socket={socket} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const config = {\r\n  ENDPOINT:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? window.location.hostname\r\n      : \"http://localhost:80\",\r\n};\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport Routes from \"./Routes\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename=\"/jeojuessr\">\r\n      <Routes />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}