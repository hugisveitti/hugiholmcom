{"version":3,"sources":["components/FrontPage.jsx","components/MapComponent.jsx","components/ImageCompontent.jsx","components/WaitingRoomComponent.jsx","Routes.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["FrontPage","socket","props","useState","roomName","setRoomName","playerName","setPlayerName","style","textAlign","TextField","id","placeholder","value","onChange","e","target","Button","variant","onClick","console","log","emit","history","push","waitingPagePath","MapComponent","setImageUrls","imageLoaded","guessSentCallback","isLeader","distance","roundPosition","setGuessSent","guessSent","lat","lng","markerPos","setMarkerPos","useEffect","defaultIcon","correctIcon","L","icon","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","CorrectMarker","Marker","position","LineBetweenMarkers","Polyline","positions","MyMarker","useMapEvents","click","latlng","padding","MapContainer","center","zoom","height","width","margin","marginBottom","TileLayer","attribution","url","Fragment","Typography","toLocaleString","paddingBottom","ImageComponent","currentIndex","setCurrentIndex","imgUrl","setImgUrl","imageUrls","setImageLoaded","countdownStarted","setCountdownStarted","players","setPlayers","setIsLeader","setDistance","undefined","setRoundPosition","timerSeconds","setTimerSeconds","countDownKey","setCountDownKey","timePerRound","setTimePerRound","currentRound","setCurrentRound","numberOfRounds","setNumberOfRounds","gameOver","setGameOver","changeCountdownKey","on","data","gameData","_players","_timePerRound","_currentRound","_numberOfRounds","myImageUrls","length","i","currKey","isGameLeader","correctPosition","_distance","changeImage","newIndex","isPlaying","size","duration","colors","remainingTime","className","image","pitch","yaw","hfov","autoLoad","CircularProgress","List","ListItem","ListItemText","map","player","score","name","ListItemIcon","ChildCare","WaitingRoomComponent","once","_roomName","_isLeader","gamePagePath","type","isNaN","ENDPOINT","window","location","hostname","Routes","setSocket","newSocket","socketIOClient","connect","exact","path","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.384c292f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { waitingPagePath } from \"../Routes\";\r\n\r\nconst FrontPage = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const handleConnectToRoom = () => {\r\n    if (roomName === \"\" || playerName === \"\") return;\r\n    console.log(roomName);\r\n    socket.emit(\"roomConnection\", { roomName, playerName });\r\n    props.history.push(waitingPagePath);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h2>Map game</h2>\r\n        <p>Still in development</p>\r\n        <p>\r\n          Please write in 'Room Name' anything, then tell your friends to write\r\n          the same thing to play together. Or you can play by yourself.\r\n        </p>\r\n        <p>\r\n          This is in development so there are probably hella bugs. ToDo: add\r\n          leaderboard. Make finding new positions better. Using open street maps\r\n          and Mapillary.\r\n        </p>\r\n        <TextField\r\n          id=\"player-text-field\"\r\n          placeholder=\"Name\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n        />\r\n        <br />\r\n        <br />\r\n        <TextField\r\n          id=\"room-text-field\"\r\n          placeholder=\"Room Name\"\r\n          value={roomName}\r\n          onChange={(e) => setRoomName(e.target.value)}\r\n        />\r\n        <br />\r\n        <br />\r\n        <Button variant=\"outlined\" onClick={handleConnectToRoom}>\r\n          Connect\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMapEvents,\r\n  Polyline,\r\n} from \"react-leaflet\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nconst MapComponent = ({\r\n  socket,\r\n  setImageUrls,\r\n  imageLoaded,\r\n  guessSentCallback,\r\n  isLeader,\r\n  distance,\r\n  roundPosition,\r\n  setGuessSent,\r\n  guessSent,\r\n}) => {\r\n  const position = [51.505, -0.09];\r\n  const [markerPos, setMarkerPos] = useState({ lat: 51.505, lng: -0.09 });\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    //  socket.on(\"handleCorrectPosition\", (data) => {\r\n    //    setDistance(+data[\"distance\"]);\r\n    //    setRoundPosition(data[\"correctPosition\"]);\r\n    //    setNextAvailable(true);\r\n    //  });\r\n  }, [socket]);\r\n\r\n  const defaultIcon = (correctIcon) =>\r\n    L.icon({\r\n      iconUrl: correctIcon\r\n        ? icon\r\n        : \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\",\r\n      shadowUrl: iconShadow,\r\n      iconSize: [25, 41],\r\n      iconAnchor: [10, 41],\r\n    });\r\n\r\n  const CorrectMarker = () => {\r\n    if (!roundPosition) return null;\r\n    return <Marker icon={defaultIcon(true)} position={roundPosition} />;\r\n  };\r\n\r\n  const LineBetweenMarkers = () => {\r\n    if (!roundPosition) return null;\r\n    return (\r\n      <Polyline\r\n        positions={[\r\n          [roundPosition.lat, roundPosition.lng],\r\n          [markerPos.lat, markerPos.lng],\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const MyMarker = () => {\r\n    useMapEvents({\r\n      click(e) {\r\n        setMarkerPos({ lat: e.latlng.lat, lng: e.latlng.lng });\r\n      },\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <Marker icon={defaultIcon(false)} position={markerPos} />\r\n        <CorrectMarker />\r\n        <LineBetweenMarkers />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleGuessSent = () => {\r\n    guessSentCallback();\r\n    setGuessSent(true);\r\n    socket.emit(\"handleSendGuess\", {\r\n      position: { lat: markerPos.lat, lng: markerPos.lng },\r\n    });\r\n  };\r\n\r\n  const startNextRound = () => {\r\n    socket.emit(\"handleStartNextRound\", {});\r\n    setImageUrls([]);\r\n    // setRoundPosition(undefined);\r\n    setGuessSent(false);\r\n    // setDistance(-1);\r\n  };\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <MapContainer\r\n        center={position}\r\n        zoom={2}\r\n        style={{\r\n          height: 400,\r\n          width: \"70%\",\r\n          margin: \"auto\",\r\n          marginBottom: 15,\r\n        }}\r\n      >\r\n        <MyMarker />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n      </MapContainer>\r\n      {roundPosition && (\r\n        <React.Fragment>\r\n          {distance !== -1 ? (\r\n            <Typography style={{ textAlign: \"center\" }}>\r\n              You were {distance.toLocaleString()} KM from the correct position.\r\n            </Typography>\r\n          ) : (\r\n            <Typography style={{ textAlign: \"center\" }}>\r\n              You did not guess this round.\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {imageLoaded && !roundPosition && (\r\n        <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n          <Button onClick={handleGuessSent} variant=\"contained\">\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {guessSent && !roundPosition && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>Waiting for other players to finish.</Typography>\r\n        </div>\r\n      )}\r\n      {guessSent && roundPosition && (\r\n        <React.Fragment>\r\n          {isLeader ? (\r\n            <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              <Button onClick={startNextRound} variant=\"contained\">\r\n                Start next round\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div style={{ textAlign: \"center\", paddingBottom: 20 }}>\r\n              <Typography>Waiting for leader to start next round</Typography>\r\n            </div>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Pannellum } from \"pannellum-react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport {\r\n  CircularProgress,\r\n  ListItemText,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport \"./ImageComponent.css\";\r\nimport MapComponent from \"./MapComponent\";\r\n\r\nconst ImageComponent = ({ socket }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n\r\n  const changeCountdownKey = () => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownKey\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n  };\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n    setCountdownStarted(false);\r\n    changeCountdownKey();\r\n  };\r\n\r\n  // 1024 640 or 2048\r\n  const getImageUrlFromKey = (key) => {\r\n    const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n    // setImgUrl(_imgUrl);\r\n    return _imgUrl;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"handleSendImages\", (data) => {\r\n      setGameOver(false);\r\n      const { gameData } = data;\r\n      const _players = data[\"players\"];\r\n      const _timePerRound = data[\"timePerRound\"];\r\n      const _currentRound = data[\"currentRound\"];\r\n      const _numberOfRounds = data[\"numberOfRounds\"];\r\n      setCurrentRound(_currentRound);\r\n      setNumberOfRounds(_numberOfRounds);\r\n      setTimePerRound(_timePerRound);\r\n      setTimerSeconds(_timePerRound);\r\n      setPlayers(_players);\r\n      const myImageUrls = [];\r\n      if (gameData[\"features\"].length > 0) {\r\n        for (let i = 0; i < gameData[\"features\"].length; i++) {\r\n          const item = gameData[\"features\"][i];\r\n          const currKey = item[\"properties\"][\"key\"];\r\n          const url = getImageUrlFromKey(currKey);\r\n          myImageUrls.push(url);\r\n        }\r\n        setCurrentIndex(0);\r\n        setImageUrls(myImageUrls);\r\n        setImgUrl(myImageUrls[0]);\r\n        setImageLoaded(true);\r\n        setCountdownStarted(true);\r\n        setRoundPosition(undefined);\r\n        setDistance(-1);\r\n        changeCountdownKey();\r\n        setGuessSent(false);\r\n      }\r\n    });\r\n\r\n    socket.on(\"handleRoundOver\", (data) => {\r\n      const { isGameLeader, correctPosition } = data;\r\n\r\n      const _distance = data[\"distance\"];\r\n      setRoundPosition(correctPosition);\r\n      setDistance(_distance);\r\n      setGuessSent(true);\r\n      setIsLeader(isGameLeader);\r\n      setImageUrls([]);\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      const _players = data[\"players\"];\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n  }, [socket]);\r\n\r\n  const changeImage = (newIndex) => {\r\n    setImgUrl(imageUrls[newIndex]);\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const handlePlayAgain = () => {\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <Button variant=\"outlined\" onClick={handlePlayAgain}>\r\n              Play again\r\n            </Button>\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div id=\"countdown-clock-container\" style={{ margin: \"auto\" }}>\r\n            <CountdownCircleTimer\r\n              key={countDownKey}\r\n              isPlaying={countdownStarted}\r\n              style={{ margin: \"auto\" }}\r\n              size={70}\r\n              duration={timerSeconds}\r\n              colors={[\r\n                [\"#004777\", 0.33],\r\n                [\"#F7B801\", 0.33],\r\n                [\"#A30000\", 0.33],\r\n              ]}\r\n            >\r\n              {({ remainingTime }) => remainingTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n          <Typography>\r\n            Round {currentRound} of {numberOfRounds}\r\n          </Typography>\r\n          {imageUrls.length > 0 ? (\r\n            <div className=\"pano-container\">\r\n              <Typography style={{ textAlign: \"center\" }}>\r\n                {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n              </Typography>\r\n              <button\r\n                className=\"pano-btn\"\r\n                id=\"pano-prev-btn\"\r\n                onClick={decIndex}\r\n              >\r\n                <i className=\"arrow arrow-left\"></i>\r\n              </button>\r\n              <button\r\n                className=\"pano-btn arrow-right\"\r\n                id=\"pano-next-btn\"\r\n                onClick={incIndex}\r\n              >\r\n                <i className=\"arrow\"></i>\r\n              </button>\r\n\r\n              <Pannellum\r\n                width=\"100%\"\r\n                height=\"500px\"\r\n                image={imgUrl}\r\n                pitch={10}\r\n                yaw={180}\r\n                hfov={110}\r\n                autoLoad\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <CircularProgress />\r\n            </div>\r\n          )}\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>Players in room</Typography>\r\n          <List style={{ width: 200, margin: \"auto\" }}>\r\n            <ListItem>\r\n              <ListItemText>Score</ListItemText>\r\n              <ListItemText>Name</ListItemText>\r\n              <ListItemText></ListItemText>\r\n            </ListItem>\r\n            {players.map((player, i) => {\r\n              return (\r\n                <React.Fragment key={`${player.name}-${i}`}>\r\n                  <ListItem>\r\n                    <ListItemText>{player.score}</ListItemText>\r\n                    <ListItemText>{player.name}</ListItemText>\r\n                    {player.isLeader ? (\r\n                      <ListItemIcon>\r\n                        <ChildCare />\r\n                      </ListItemIcon>\r\n                    ) : (\r\n                      <ListItemText />\r\n                    )}\r\n                  </ListItem>\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </List>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n    }\r\n  };\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h3>Waiting room</h3>\r\n      <h5>Room {roomName}</h5>\r\n      <Typography>Players in room</Typography>\r\n      <List style={{ width: 200, margin: \"auto\" }}>\r\n        {players.map((player, i) => {\r\n          return (\r\n            <React.Fragment key={`${player.name}-${i}`}>\r\n              <ListItem>\r\n                <ListItemText>{player.name}</ListItemText>\r\n                {player.isLeader ? (\r\n                  <ListItemIcon>\r\n                    <ChildCare />\r\n                  </ListItemIcon>\r\n                ) : (\r\n                  <ListItemText />\r\n                )}\r\n              </ListItem>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </List>\r\n      {isLeader ? (\r\n        <React.Fragment>\r\n          <br />\r\n          <br />\r\n          <Typography>Number of Rounds</Typography>\r\n          <TextField\r\n            id=\"numberofrounds-text-field\"\r\n            type=\"number\"\r\n            placeholder=\"Number of rounds\"\r\n            value={numberOfRounds}\r\n            onChange={(e) => setNumberOfRounds(e.target.value)}\r\n          />\r\n          <br />\r\n          <br />\r\n          <Typography>Seconds per round</Typography>\r\n          <TextField\r\n            id=\"timeperround-text-field\"\r\n            type=\"number\"\r\n            placeholder=\"seconds per round\"\r\n            value={timePerRound}\r\n            onChange={(e) => setTimePerRound(e.target.value)}\r\n          />\r\n          <br />\r\n          <br />\r\n\r\n          <Button onClick={handleStartGame} variant=\"outlined\">\r\n            Start Game\r\n          </Button>\r\n        </React.Fragment>\r\n      ) : (\r\n        <Typography>Waiting for leader to start the game.</Typography>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ImageComponent from \"./components/ImageCompontent\";\r\nimport WaitingRoomComponent from \"./components/WaitingRoomComponent\";\r\nimport { config } from \"./config\";\r\n\r\nconst ENDPOINT = config.ENDPOINT;\r\n\r\nexport const frontPagePath = \"/\";\r\nexport const gamePagePath = \"/game\";\r\nexport const waitingPagePath = \"/waitingroom\";\r\n\r\nconst Routes = () => {\r\n  const [socket, setSocket] = useState(undefined);\r\n  useEffect(() => {\r\n    const newSocket = socketIOClient.connect(ENDPOINT);\r\n    setSocket(newSocket);\r\n    newSocket.on(\"connectedToRoomCallBack\", (data) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={frontPagePath}\r\n        render={(props) => <FrontPage {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        exact\r\n        path={gamePagePath}\r\n        render={(props) => <ImageComponent {...props} socket={socket} />}\r\n      />\r\n      <Route\r\n        exact\r\n        path={waitingPagePath}\r\n        render={(props) => <WaitingRoomComponent {...props} socket={socket} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const config = {\r\n  ENDPOINT:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? window.location.hostname\r\n      : \"http://localhost:8000\",\r\n};\r\n","import { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}