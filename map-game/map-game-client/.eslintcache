[{"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\index.js":"1","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\App.js":"2","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\reportWebVitals.js":"3","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\Routes.jsx":"4","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\FrontPage.jsx":"5","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\config.js":"6","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\MapComponent.jsx":"7","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\WaitingRoomComponent.jsx":"8","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\AppContainer.jsx":"9","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\GameContainer.jsx":"10","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\PanoramaComponent.jsx":"11","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\LeaderBoardComponent.jsx":"12","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\utility\\socketFunctions.js":"13"},{"size":449,"mtime":1612374305972,"results":"14","hashOfConfig":"15"},{"size":238,"mtime":1612220370697,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1257,"mtime":1612258873671,"results":"18","hashOfConfig":"15"},{"size":3349,"mtime":1612375894484,"results":"19","hashOfConfig":"15"},{"size":153,"mtime":1611951300238,"results":"20","hashOfConfig":"15"},{"size":6439,"mtime":1613249546122,"results":"21","hashOfConfig":"15"},{"size":4892,"mtime":1612375853639,"results":"22","hashOfConfig":"15"},{"size":1883,"mtime":1612216653551,"results":"23","hashOfConfig":"15"},{"size":6474,"mtime":1612375498591,"results":"24","hashOfConfig":"15"},{"size":2943,"mtime":1612378314751,"results":"25","hashOfConfig":"15"},{"size":1426,"mtime":1612260253898,"results":"26","hashOfConfig":"15"},{"size":2897,"mtime":1612379091322,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"11wwx1u",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\index.js",[],["58","59"],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\App.js",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\reportWebVitals.js",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\Routes.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\FrontPage.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\config.js",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\MapComponent.jsx",["60"],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\WaitingRoomComponent.jsx",["61","62"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport { gamePagePath } from \"../Routes\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport { playerConnectedCheck } from \"../utility/socketFunctions\";\r\n\r\nconst WaitingRoomComponent = ({ socket, ...props }) => {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [onlyPano, setOnlyPano] = useState(true);\r\n  const [onlyEuropeUsa, setOnlyEuropeUsa] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      playerConnectedCheck(socket, props);\r\n\r\n      socket.emit(\"connectedToWaitingRoom\");\r\n      socket.once(\"connectedToWaitingRoomCallback\", (data) => {\r\n        const _roomName = data[\"roomName\"];\r\n        const _players = data[\"players\"];\r\n        const _isLeader = data[\"isLeader\"];\r\n        setRoomName(_roomName);\r\n        setIsLeader(_isLeader);\r\n        setPlayers(_players);\r\n      });\r\n\r\n      socket.on(\"updatePlayers\", (data) => {\r\n        const _players = data[\"players\"];\r\n        if (_players) {\r\n          setPlayers(_players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"gameStarted\", () => {\r\n        props.history.push(gamePagePath);\r\n      });\r\n    }\r\n  }, [socket, props.history]);\r\n\r\n  const handleStartGame = () => {\r\n    if (!isNaN(+timePerRound) && !isNaN(+numberOfRounds)) {\r\n      socket.emit(\"handleStartGame\", {\r\n        timePerRound,\r\n        numberOfRounds,\r\n        onlyPano,\r\n        onlyEuropeUsa,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Paper elevation={1} className={classes.cardContainer}>\r\n        <h3>Waiting room</h3>\r\n        <h5>Room {roomName}</h5>\r\n        <Typography>\r\n          To play with your friends, tell them to write '{roomName}' in the room\r\n          inputbox and press connect!\r\n        </Typography>\r\n        <Typography>Players in room</Typography>\r\n        <List style={{ width: 200, margin: \"auto\" }}>\r\n          {players.map((player, i) => {\r\n            return (\r\n              <React.Fragment key={`${player.name}-${i}`}>\r\n                <ListItem>\r\n                  <ListItemText>{player.name}</ListItemText>\r\n                  {player.isLeader ? (\r\n                    <ListItemIcon>\r\n                      <ChildCare />\r\n                    </ListItemIcon>\r\n                  ) : (\r\n                    <ListItemText />\r\n                  )}\r\n                </ListItem>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </List>\r\n        {isLeader ? (\r\n          <React.Fragment>\r\n            <br />\r\n            <br />\r\n            <Typography>Number of Rounds</Typography>\r\n            <TextField\r\n              id=\"numberofrounds-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"Number of rounds\"\r\n              value={numberOfRounds}\r\n              onChange={(e) => setNumberOfRounds(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Typography>Seconds per round</Typography>\r\n            <TextField\r\n              id=\"timeperround-text-field\"\r\n              type=\"number\"\r\n              placeholder=\"seconds per round\"\r\n              value={timePerRound}\r\n              onChange={(e) => setTimePerRound(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={onlyPano}\r\n                  onChange={() => {\r\n                    setOnlyPano(!onlyPano);\r\n                  }}\r\n                />\r\n              }\r\n              label=\"Use only panoramas?\"\r\n            />\r\n            {/**\r\n          * \r\n             <br />\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  value={onlyEuropeUsa}\r\n                  onChange={() => setOnlyEuropeUsa(!onlyEuropeUsa)}\r\n                />\r\n              }\r\n              label=\"Use only 40+ latitude?\"\r\n            />\r\n              */}\r\n            <br />\r\n            <br />\r\n            <Button\r\n              onClick={handleStartGame}\r\n              variant=\"contained\"\r\n              className={classes.buttonGreen}\r\n            >\r\n              Start Game\r\n            </Button>\r\n          </React.Fragment>\r\n        ) : (\r\n          <Typography>Waiting for leader to start the game.</Typography>\r\n        )}\r\n      </Paper>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default WaitingRoomComponent;\r\n","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\AppContainer.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\GameContainer.jsx",["63"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { CircularProgress, Typography, Button } from \"@material-ui/core\";\r\nimport {\r\n  watchSendImages,\r\n  watchRoundOver,\r\n  sortPlayersByScore,\r\n} from \"../utility/socketFunctions\";\r\n\r\nimport \"./GameContainer.css\";\r\nimport MapComponent from \"./MapComponent\";\r\nimport AppContainer, { useStyles } from \"./AppContainer\";\r\nimport icon from \"./icon.png\";\r\nimport PanoramaComponent from \"./PanoramaComponent\";\r\nimport LeaderBoardComponent from \"./LeaderBoardComponent\";\r\nimport { playerConnectedCheck } from \"../utility/socketFunctions\";\r\n\r\nconst GameContainer = ({ socket, ...props }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [roundOver, setRoundOver] = useState(false);\r\n  const [playingAgainPressed, setPlayAgainPressed] = useState(false);\r\n  const [imageData, setImageData] = useState([]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  const startCountDownTimer = useCallback(() => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownTimer2\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n    setCountdownStarted(true);\r\n  }, [countDownKey, timePerRound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    playerConnectedCheck(socket, props);\r\n\r\n    watchSendImages({\r\n      socket,\r\n      setGameOver,\r\n      setRoomName,\r\n      setCurrentRound,\r\n      setNumberOfRounds,\r\n      setTimePerRound,\r\n      setTimerSeconds,\r\n      setPlayers,\r\n      setCurrentIndex,\r\n      setImageUrls,\r\n      setImgUrl,\r\n      setImageLoaded,\r\n      setDistance,\r\n      setGuessSent,\r\n      startCountDownTimer,\r\n      setRoundOver,\r\n      setRoundPosition,\r\n      setImageData,\r\n    });\r\n\r\n    watchRoundOver({\r\n      socket,\r\n      setPlayerName,\r\n      setPlayers,\r\n      setRoundPosition,\r\n      setDistance,\r\n      setIsLeader,\r\n      setCountdownStarted,\r\n      setRoundOver,\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      let _players = data[\"players\"];\r\n      _players = sortPlayersByScore(_players);\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      setGameOver(false);\r\n      setDistance(-1);\r\n      setPlayAgainPressed(false);\r\n      setRoundOver(false);\r\n      setRoundPosition(undefined);\r\n    });\r\n  }, [socket, startCountDownTimer]);\r\n\r\n  const handlePlayAgain = () => {\r\n    setPlayAgainPressed(true);\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  const RenderPlayAgainBtn = () => {\r\n    if (playingAgainPressed) {\r\n      return (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handlePlayAgain}\r\n        className={classes.buttonGreen}\r\n      >\r\n        Play again\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <RenderPlayAgainBtn />\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div\r\n            id=\"info-container\"\r\n            style={{ padding: 15, textAlign: \"center\", position: \"relevant\" }}\r\n          >\r\n            <div\r\n              id=\"count-down-container\"\r\n              style={{\r\n                margin: \"auto\",\r\n                position: \"absolute\",\r\n                top: 90,\r\n                left: 10,\r\n              }}\r\n            >\r\n              <CountdownCircleTimer\r\n                key={countDownKey}\r\n                isPlaying={countdownStarted}\r\n                size={70}\r\n                duration={timerSeconds}\r\n                colors={[\r\n                  [\"#004777\", 0.33],\r\n                  [\"#F7B801\", 0.33],\r\n                  [\"#A30000\", 0.33],\r\n                ]}\r\n              >\r\n                {({ remainingTime }) => remainingTime}\r\n              </CountdownCircleTimer>\r\n            </div>\r\n            <img className={classes.icon} src={icon} alt=\"jjicon\" />\r\n            <Typography>\r\n              Round {currentRound} of {numberOfRounds}\r\n            </Typography>\r\n          </div>\r\n          <PanoramaComponent\r\n            imgUrl={imgUrl}\r\n            imageUrls={imageUrls}\r\n            currentIndex={currentIndex}\r\n            setCurrentIndex={setCurrentIndex}\r\n            setImgUrl={setImgUrl}\r\n            guessSent={guessSent}\r\n            imageData={imageData}\r\n          />\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n            players={players}\r\n            playerName={playerName}\r\n            roundOver={roundOver}\r\n            setRoundOver={setRoundOver}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <LeaderBoardComponent players={players} roomName={roomName} />\r\n      )}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default GameContainer;\r\n","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\PanoramaComponent.jsx",["64"],"import React, { useEffect, useState } from \"react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport \"./GameContainer.css\";\r\nimport { Viewer } from \"photo-sphere-viewer\";\r\nimport \"photo-sphere-viewer/dist/photo-sphere-viewer.css\";\r\n\r\nconst PanoramaComponent = ({\r\n  imageUrls,\r\n\r\n  currentIndex,\r\n  setCurrentIndex,\r\n\r\n  guessSent,\r\n  imageData,\r\n}) => {\r\n  const [viewer, setViewer] = useState(undefined);\r\n  const spehereRef = React.createRef();\r\n\r\n  const changeImage = (newIndex) => {\r\n    // delete webGL so its doesn't load stuff we dont want\r\n\r\n    if (viewer) {\r\n      viewer.setPanorama(imageUrls[newIndex]).then(\r\n        () => {},\r\n        (e) => {\r\n          console.log(\"error\", e);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imageUrls.length > 0) {\r\n      if (!viewer) {\r\n        const viewer2 = new Viewer({\r\n          container: spehereRef.current,\r\n          panorama: imageUrls[0],\r\n          navbar: false,\r\n          loadingTxt: \"\",\r\n        });\r\n        setViewer(viewer2);\r\n      } else {\r\n        changeImage(0);\r\n      }\r\n    }\r\n  }, [imageUrls?.length]);\r\n\r\n  const displayPano = imageUrls.length > 0 ? \"block\" : \"none\";\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"pano-container\" style={{ display: displayPano }}>\r\n        <Typography style={{ textAlign: \"center\" }}>\r\n          {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n        </Typography>\r\n        <button className=\"pano-btn\" id=\"pano-prev-btn\" onClick={decIndex}>\r\n          <i className=\"arrow arrow-left\"></i>\r\n        </button>\r\n        <button\r\n          className=\"pano-btn arrow-right\"\r\n          id=\"pano-next-btn\"\r\n          onClick={incIndex}\r\n        >\r\n          <i className=\"arrow\"></i>\r\n        </button>\r\n        <div\r\n          style={{ height: 400, width: \"100%\" }}\r\n          id=\"viewer\"\r\n          ref={spehereRef}\r\n        ></div>\r\n      </div>\r\n      <div style={{ display: imageUrls.length > 0 ? \"none\" : \"block\" }}>\r\n        {!guessSent ? (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <CircularProgress />\r\n          </div>\r\n        ) : (\r\n          <Typography style={{ textAlign: \"center\" }}>\r\n            Waiting for leader to start round.\r\n          </Typography>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PanoramaComponent;\r\n","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\LeaderBoardComponent.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\utility\\socketFunctions.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":34,"column":10,"nodeType":"71","messageId":"72","endLine":34,"endColumn":22},{"ruleId":"69","severity":1,"message":"73","line":26,"column":25,"nodeType":"71","messageId":"72","endLine":26,"endColumn":41},{"ruleId":"74","severity":1,"message":"75","line":55,"column":6,"nodeType":"76","endLine":55,"endColumn":29,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"75","line":108,"column":6,"nodeType":"76","endLine":108,"endColumn":35,"suggestions":"78"},{"ruleId":"74","severity":1,"message":"79","line":70,"column":6,"nodeType":"76","endLine":70,"endColumn":25,"suggestions":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'oldMarkerPos' is assigned a value but never used.","Identifier","unusedVar","'setOnlyEuropeUsa' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["83"],["84"],"React Hook useEffect has missing dependencies: 'changeImage', 'imageUrls', 'spehereRef', and 'viewer'. Either include them or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [socket, props.history, props]",{"range":"92","text":"93"},"Update the dependencies array to be: [props, socket, startCountDownTimer]",{"range":"94","text":"95"},"Update the dependencies array to be: [changeImage, imageUrls, imageUrls.length, spehereRef, viewer]",{"range":"96","text":"97"},[1642,1665],"[socket, props.history, props]",[3444,3473],"[props, socket, startCountDownTimer]",[1696,1715],"[changeImage, imageUrls, imageUrls.length, spehereRef, viewer]"]