[{"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\index.js":"1","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\App.js":"2","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\reportWebVitals.js":"3","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\Routes.jsx":"4","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\FrontPage.jsx":"5","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\ImageCompontent.jsx":"6","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\config.js":"7","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\MapComponent.jsx":"8","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\WaitingRoomComponent.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":237,"mtime":1612051415404,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":1261,"mtime":1612050713747,"results":"14","hashOfConfig":"11"},{"size":1718,"mtime":1612050735290,"results":"15","hashOfConfig":"11"},{"size":8143,"mtime":1612049690316,"results":"16","hashOfConfig":"11"},{"size":153,"mtime":1611951300238,"results":"17","hashOfConfig":"11"},{"size":4388,"mtime":1612049647657,"results":"18","hashOfConfig":"11"},{"size":3287,"mtime":1612048567075,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"11wwx1u",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\index.js",[],["40","41"],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\App.js",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\reportWebVitals.js",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\Routes.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\FrontPage.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\ImageCompontent.jsx",["42"],"import React, { useEffect, useState } from \"react\";\r\nimport { Pannellum } from \"pannellum-react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport {\r\n  CircularProgress,\r\n  ListItemText,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { ChildCare } from \"@material-ui/icons\";\r\nimport \"./ImageComponent.css\";\r\nimport MapComponent from \"./MapComponent\";\r\n\r\nconst ImageComponent = ({ socket }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [imgUrl, setImgUrl] = useState(\"\");\r\n  const [imageUrls, setImageUrls] = useState([]);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [countdownStarted, setCountdownStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [isLeader, setIsLeader] = useState(false);\r\n  const [distance, setDistance] = useState(-1);\r\n  const [roundPosition, setRoundPosition] = useState(undefined);\r\n  const [timerSeconds, setTimerSeconds] = useState(60);\r\n  const [countDownKey, setCountDownKey] = useState(\"countDownTimer\");\r\n  const [timePerRound, setTimePerRound] = useState(60);\r\n  const [currentRound, setCurrentRound] = useState(0);\r\n  const [numberOfRounds, setNumberOfRounds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [guessSent, setGuessSent] = useState(false);\r\n\r\n  const changeCountdownKey = () => {\r\n    if (countDownKey === \"countDownTimer\") {\r\n      setCountDownKey(\"countDownKey\");\r\n    } else {\r\n      setCountDownKey(\"countDownTimer\");\r\n    }\r\n    setTimerSeconds(timePerRound);\r\n  };\r\n\r\n  const guessSentCallback = () => {\r\n    setImageLoaded(false);\r\n    setCountdownStarted(false);\r\n    changeCountdownKey();\r\n  };\r\n\r\n  // 1024 640 or 2048\r\n  const getImageUrlFromKey = (key) => {\r\n    const _imgUrl = `https://images.mapillary.com/${key}/thumb-2048.jpg`;\r\n    // setImgUrl(_imgUrl);\r\n    return _imgUrl;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"handleSendImages\", (data) => {\r\n      setGameOver(false);\r\n      const { gameData } = data;\r\n      const _players = data[\"players\"];\r\n      const _timePerRound = data[\"timePerRound\"];\r\n      const _currentRound = data[\"currentRound\"];\r\n      const _numberOfRounds = data[\"numberOfRounds\"];\r\n      setCurrentRound(_currentRound);\r\n      setNumberOfRounds(_numberOfRounds);\r\n      setTimePerRound(_timePerRound);\r\n      setTimerSeconds(_timePerRound);\r\n      setPlayers(_players);\r\n      const myImageUrls = [];\r\n      if (gameData[\"features\"].length > 0) {\r\n        for (let i = 0; i < gameData[\"features\"].length; i++) {\r\n          const item = gameData[\"features\"][i];\r\n          const currKey = item[\"properties\"][\"key\"];\r\n          const url = getImageUrlFromKey(currKey);\r\n          myImageUrls.push(url);\r\n        }\r\n        setCurrentIndex(0);\r\n        setImageUrls(myImageUrls);\r\n        setImgUrl(myImageUrls[0]);\r\n        setImageLoaded(true);\r\n        setCountdownStarted(true);\r\n        setRoundPosition(undefined);\r\n        setDistance(-1);\r\n        changeCountdownKey();\r\n        setGuessSent(false);\r\n      }\r\n    });\r\n\r\n    socket.on(\"handleRoundOver\", (data) => {\r\n      const { isGameLeader, correctPosition } = data;\r\n\r\n      const _distance = data[\"distance\"];\r\n      setRoundPosition(correctPosition);\r\n      setDistance(_distance);\r\n      setGuessSent(true);\r\n      setIsLeader(isGameLeader);\r\n      setImageUrls([]);\r\n    });\r\n\r\n    socket.on(\"handleGameOver\", (data) => {\r\n      const _players = data[\"players\"];\r\n      setPlayers(_players);\r\n      setGameOver(true);\r\n    });\r\n  }, [socket]);\r\n\r\n  const changeImage = (newIndex) => {\r\n    setImgUrl(imageUrls[newIndex]);\r\n  };\r\n\r\n  const incIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === imageUrls.length - 1) {\r\n      newIndex = 0;\r\n      setCurrentIndex(0);\r\n    } else {\r\n      newIndex = currentIndex + 1;\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const decIndex = () => {\r\n    let newIndex = -1;\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(imageUrls.length - 1);\r\n      newIndex = imageUrls.length - 1;\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n      newIndex = currentIndex - 1;\r\n    }\r\n    changeImage(newIndex);\r\n  };\r\n\r\n  const handlePlayAgain = () => {\r\n    socket.emit(\"handleStartGame\", { timePerRound, numberOfRounds });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {gameOver ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h3>Game Over</h3>\r\n          {isLeader ? (\r\n            <Button variant=\"outlined\" onClick={handlePlayAgain}>\r\n              Play again\r\n            </Button>\r\n          ) : (\r\n            <Typography>Waiting for leader to start again</Typography>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div id=\"countdown-clock-container\" style={{ margin: \"auto\" }}>\r\n            <CountdownCircleTimer\r\n              key={countDownKey}\r\n              isPlaying={countdownStarted}\r\n              style={{ margin: \"auto\" }}\r\n              size={70}\r\n              duration={timerSeconds}\r\n              colors={[\r\n                [\"#004777\", 0.33],\r\n                [\"#F7B801\", 0.33],\r\n                [\"#A30000\", 0.33],\r\n              ]}\r\n            >\r\n              {({ remainingTime }) => remainingTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n          <Typography>\r\n            Round {currentRound} of {numberOfRounds}\r\n          </Typography>\r\n          {imageUrls.length > 0 ? (\r\n            <div className=\"pano-container\">\r\n              <Typography style={{ textAlign: \"center\" }}>\r\n                {currentIndex + 1} / {imageUrls.length}{\" \"}\r\n              </Typography>\r\n              <button\r\n                className=\"pano-btn\"\r\n                id=\"pano-prev-btn\"\r\n                onClick={decIndex}\r\n              >\r\n                <i className=\"arrow arrow-left\"></i>\r\n              </button>\r\n              <button\r\n                className=\"pano-btn arrow-right\"\r\n                id=\"pano-next-btn\"\r\n                onClick={incIndex}\r\n              >\r\n                <i className=\"arrow\"></i>\r\n              </button>\r\n\r\n              <Pannellum\r\n                width=\"100%\"\r\n                height=\"500px\"\r\n                image={imgUrl}\r\n                pitch={10}\r\n                yaw={180}\r\n                hfov={110}\r\n                autoLoad\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <CircularProgress />\r\n            </div>\r\n          )}\r\n          <MapComponent\r\n            socket={socket}\r\n            setImageUrls={setImageUrls}\r\n            imageLoaded={imageLoaded}\r\n            guessSentCallback={guessSentCallback}\r\n            isLeader={isLeader}\r\n            distance={distance}\r\n            roundPosition={roundPosition}\r\n            setGuessSent={setGuessSent}\r\n            guessSent={guessSent}\r\n          />\r\n        </React.Fragment>\r\n      )}\r\n      {players.length > 0 && (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography>Players in room</Typography>\r\n          <List style={{ width: 200, margin: \"auto\" }}>\r\n            <ListItem>\r\n              <ListItemText>Score</ListItemText>\r\n              <ListItemText>Name</ListItemText>\r\n              <ListItemText></ListItemText>\r\n            </ListItem>\r\n            {players.map((player, i) => {\r\n              return (\r\n                <React.Fragment key={`${player.name}-${i}`}>\r\n                  <ListItem>\r\n                    <ListItemText>{player.score}</ListItemText>\r\n                    <ListItemText>{player.name}</ListItemText>\r\n                    {player.isLeader ? (\r\n                      <ListItemIcon>\r\n                        <ChildCare />\r\n                      </ListItemIcon>\r\n                    ) : (\r\n                      <ListItemText />\r\n                    )}\r\n                  </ListItem>\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </List>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageComponent;\r\n","C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\config.js",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\MapComponent.jsx",[],"C:\\Users\\Hugi\\Documents\\js\\hugiholm\\map-game\\map-game-client\\src\\components\\WaitingRoomComponent.jsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":107,"column":6,"nodeType":"49","endLine":107,"endColumn":14,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeCountdownKey'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [changeCountdownKey, socket]",{"range":"56","text":"57"},[3609,3617],"[changeCountdownKey, socket]"]